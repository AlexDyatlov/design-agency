!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(E,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,o=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,s=t.indexOf,i={},a=i.toString,g=i.hasOwnProperty,r=g.toString,d=r.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=E.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var n,s,a=(i=i||C).createElement("script");if(a.text=e,t)for(n in u)(s=t[n]||t.getAttribute&&t.getAttribute(n))&&a.setAttribute(n,s);i.head.appendChild(a).parentNode.removeChild(a)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[a.call(e)]||"object":typeof e}var c="3.5.1",S=function(e,t){return new S.fn.init(e,t)};function h(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!b(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:c,constructor:S,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(i){return this.pushStack(S.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,i,n,s,a,r=arguments[0]||{},o=1,l=arguments.length,d=!1;for("boolean"==typeof r&&(d=r,r=arguments[o]||{},o++),"object"==typeof r||b(r)||(r={}),o===l&&(r=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(d&&n&&(S.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[t],a=s&&!Array.isArray(i)?[]:s||S.isPlainObject(i)?i:{},s=!1,r[t]=S.extend(d,a,n)):void 0!==n&&(r[t]=n));return r},S.extend({expando:"jQuery"+(c+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==a.call(e))&&(!(t=n(e))||"function"==typeof(i=g.call(t,"constructor")&&t.constructor)&&r.call(i)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(h(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(h(Object(e))?S.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:s.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,s=e.length;n<i;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,i){for(var n=[],s=0,a=e.length,r=!i;s<a;s++)!t(e[s],s)!=r&&n.push(e[s]);return n},map:function(e,t,i){var n,s,a=0,r=[];if(h(e))for(n=e.length;a<n;a++)null!=(s=t(e[a],a,i))&&r.push(s);else for(a in e)null!=(s=t(e[a],a,i))&&r.push(s);return v(r)},guid:1,support:y}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var p=function(i){function c(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function s(){T()}var e,p,w,a,r,f,h,m,x,l,d,T,E,o,C,v,u,g,y,S="sizzle"+ +new Date,b=i.document,k=0,n=0,M=le(),P=le(),L=le(),z=le(),D=function(e,t){return e===t&&(d=!0),0},A={}.hasOwnProperty,t=[],$=t.pop,O=t.push,N=t.push,I=t.slice,j=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+q+"*("+B+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+q+"*\\]",F=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",G=new RegExp(q+"+","g"),W=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),X=new RegExp("^"+q+"*,"+q+"*"),V=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),Y=new RegExp(q+"|>"),_=new RegExp(F),U=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),se=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{N.apply(t=I.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){N={apply:t.length?function(e,t){O.apply(e,I.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function oe(t,e,i,n){var s,a,r,o,l,d,u,c=e&&e.ownerDocument,h=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return i;if(!n&&(T(e),e=e||E,C)){if(11!==h&&(l=te.exec(t)))if(s=l[1]){if(9===h){if(!(r=e.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(c&&(r=c.getElementById(s))&&y(e,r)&&r.id===s)return i.push(r),i}else{if(l[2])return N.apply(i,e.getElementsByTagName(t)),i;if((s=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return N.apply(i,e.getElementsByClassName(s)),i}if(p.qsa&&!z[t+" "]&&(!v||!v.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(u=t,c=e,1===h&&(Y.test(t)||V.test(t))){for((c=ie.test(t)&&ge(e.parentNode)||e)===e&&p.scope||((o=e.getAttribute("id"))?o=o.replace(se,ae):e.setAttribute("id",o=S)),a=(d=f(t)).length;a--;)d[a]=(o?"#"+o:":scope")+" "+be(d[a]);u=d.join(",")}try{return N.apply(i,c.querySelectorAll(u)),i}catch(e){z(t,!0)}finally{o===S&&e.removeAttribute("id")}}}return m(t.replace(W,"$1"),e,i,n)}function le(){var i=[];function n(e,t){return i.push(e+" ")>w.cacheLength&&delete n[i.shift()],n[e+" "]=t}return n}function de(e){return e[S]=!0,e}function ue(e){var t=E.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var i=e.split("|"),n=i.length;n--;)w.attrHandle[i[n]]=t}function he(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(r){return de(function(a){return a=+a,de(function(e,t){for(var i,n=r([],e.length,a),s=n.length;s--;)e[i=n[s]]&&(e[i]=!(t[i]=e[i]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=oe.support={},r=oe.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Q.test(t||i&&i.nodeName||"HTML")},T=oe.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:b;return n!=E&&9===n.nodeType&&n.documentElement&&(o=(E=n).documentElement,C=!r(E),b!=E&&(i=E.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",s,!1):i.attachEvent&&i.attachEvent("onunload",s)),p.scope=ue(function(e){return o.appendChild(e).appendChild(E.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ue(function(e){return e.appendChild(E.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(E.getElementsByClassName),p.getById=ue(function(e){return o.appendChild(e).id=S,!E.getElementsByName||!E.getElementsByName(S).length}),p.getById?(w.filter.ID=function(e){var t=e.replace(ne,c);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i=t.getElementById(e);return i?[i]:[]}}):(w.filter.ID=function(e){var i=e.replace(ne,c);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i,n,s,a=t.getElementById(e);if(a){if((i=a.getAttributeNode("id"))&&i.value===e)return[a];for(s=t.getElementsByName(e),n=0;a=s[n++];)if((i=a.getAttributeNode("id"))&&i.value===e)return[a]}return[]}}),w.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],s=0,a=t.getElementsByTagName(e);if("*"!==e)return a;for(;i=a[s++];)1===i.nodeType&&n.push(i);return n},w.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},u=[],v=[],(p.qsa=ee.test(E.querySelectorAll))&&(ue(function(e){var t;o.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+q+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+S+"-]").length||v.push("~="),(t=E.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+q+"*name"+q+"*="+q+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=E.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(p.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ue(function(e){p.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),u.push("!=",F)}),v=v.length&&new RegExp(v.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(o.compareDocumentPosition),y=t||ee.test(o.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===i?e==E||e.ownerDocument==b&&y(b,e)?-1:t==E||t.ownerDocument==b&&y(b,t)?1:l?j(l,e)-j(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,s=e.parentNode,a=t.parentNode,r=[e],o=[t];if(!s||!a)return e==E?-1:t==E?1:s?-1:a?1:l?j(l,e)-j(l,t):0;if(s===a)return he(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)o.unshift(i);for(;r[n]===o[n];)n++;return n?he(r[n],o[n]):r[n]==b?-1:o[n]==b?1:0}),E},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(T(e),p.matchesSelector&&C&&!z[t+" "]&&(!u||!u.test(t))&&(!v||!v.test(t)))try{var i=g.call(e,t);if(i||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){z(t,!0)}return 0<oe(t,E,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=E&&T(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=E&&T(e);var i=w.attrHandle[t.toLowerCase()],n=i&&A.call(w.attrHandle,t.toLowerCase())?i(e,t,!C):void 0;return void 0!==n?n:p.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},oe.escape=function(e){return(e+"").replace(se,ae)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],n=0,s=0;if(d=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(D),d){for(;t=e[s++];)t===e[s]&&(n=i.push(s));for(;n--;)e.splice(i[n],1)}return l=null,e},a=oe.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=a(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=a(t);return i},(w=oe.selectors={cacheLength:50,createPseudo:de,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,c),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,c),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&_.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,c).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=M[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&M(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,s){return function(e){var t=oe.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===s:"!="===n?t!==s:"^="===n?s&&0===t.indexOf(s):"*="===n?s&&-1<t.indexOf(s):"$="===n?s&&t.slice(-s.length)===s:"~="===n?-1<(" "+t.replace(G," ")+" ").indexOf(s):"|="===n&&(t===s||t.slice(0,s.length+1)===s+"-"))}},CHILD:function(f,e,t,m,v){var g="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===m&&0===v?function(e){return!!e.parentNode}:function(e,t,i){var n,s,a,r,o,l,d=g!=y?"nextSibling":"previousSibling",u=e.parentNode,c=b&&e.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(u){if(g){for(;d;){for(r=e;r=r[d];)if(b?r.nodeName.toLowerCase()===c:1===r.nodeType)return!1;l=d="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&h){for(p=(o=(n=(s=(a=(r=u)[S]||(r[S]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],r=o&&u.childNodes[o];r=++o&&r&&r[d]||(p=o=0)||l.pop();)if(1===r.nodeType&&++p&&r===e){s[f]=[k,o,p];break}}else if(h&&(p=o=(n=(s=(a=(r=e)[S]||(r[S]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===p)for(;(r=++o&&r&&r[d]||(p=o=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==c:1!==r.nodeType)||!++p||(h&&((s=(a=r[S]||(r[S]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]=[k,p]),r!==e)););return(p-=v)===m||p%m==0&&0<=p/m}}},PSEUDO:function(e,a){var t,r=w.pseudos[e]||w.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[S]?r(a):1<r.length?(t=[e,e,"",a],w.setFilters.hasOwnProperty(e.toLowerCase())?de(function(e,t){for(var i,n=r(e,a),s=n.length;s--;)e[i=j(e,n[s])]=!(t[i]=n[s])}):function(e){return r(e,0,t)}):r}},pseudos:{not:de(function(e){var n=[],s=[],o=h(e.replace(W,"$1"));return o[S]?de(function(e,t,i,n){for(var s,a=o(e,null,n,[]),r=e.length;r--;)(s=a[r])&&(e[r]=!(t[r]=s))}):function(e,t,i){return n[0]=e,o(n,null,i,s),n[0]=null,!s.pop()}}),has:de(function(t){return function(e){return 0<oe(t,e).length}}),contains:de(function(t){return t=t.replace(ne,c),function(e){return-1<(e.textContent||a(e)).indexOf(t)}}),lang:de(function(i){return U.test(i||"")||oe.error("unsupported lang: "+i),i=i.replace(ne,c).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,i){return[i<0?i+t:i]}),even:ve(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ve(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ve(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ve(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=fe(e);function ye(){}function be(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function we(o,e,t){var l=e.dir,d=e.next,u=d||l,c=t&&"parentNode"===u,h=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||c)return o(e,t,i);return!1}:function(e,t,i){var n,s,a,r=[k,h];if(i){for(;e=e[l];)if((1===e.nodeType||c)&&o(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||c)if(s=(a=e[S]||(e[S]={}))[e.uniqueID]||(a[e.uniqueID]={}),d&&d===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=s[u])&&n[0]===k&&n[1]===h)return r[2]=n[2];if((s[u]=r)[2]=o(e,t,i))return!0}return!1}}function xe(s){return 1<s.length?function(e,t,i){for(var n=s.length;n--;)if(!s[n](e,t,i))return!1;return!0}:s[0]}function Te(e,t,i,n,s){for(var a,r=[],o=0,l=e.length,d=null!=t;o<l;o++)(a=e[o])&&(i&&!i(a,n,s)||(r.push(a),d&&t.push(o)));return r}function Ee(p,f,m,v,g,e){return v&&!v[S]&&(v=Ee(v)),g&&!g[S]&&(g=Ee(g,e)),de(function(e,t,i,n){var s,a,r,o=[],l=[],d=t.length,u=e||function(e,t,i){for(var n=0,s=t.length;n<s;n++)oe(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),c=!p||!e&&f?u:Te(u,o,p,i,n),h=m?g||(e?p:d||v)?[]:t:c;if(m&&m(c,h,i,n),v)for(s=Te(h,l),v(s,[],i,n),a=s.length;a--;)(r=s[a])&&(h[l[a]]=!(c[l[a]]=r));if(e){if(g||p){if(g){for(s=[],a=h.length;a--;)(r=h[a])&&s.push(c[a]=r);g(null,h=[],s,n)}for(a=h.length;a--;)(r=h[a])&&-1<(s=g?j(e,r):o[a])&&(e[s]=!(t[s]=r))}}else h=Te(h===t?h.splice(d,h.length):h),g?g(null,t,h,n):N.apply(t,h)})}function Ce(e){for(var s,t,i,n=e.length,a=w.relative[e[0].type],r=a||w.relative[" "],o=a?1:0,l=we(function(e){return e===s},r,!0),d=we(function(e){return-1<j(s,e)},r,!0),u=[function(e,t,i){var n=!a&&(i||t!==x)||((s=t).nodeType?l:d)(e,t,i);return s=null,n}];o<n;o++)if(t=w.relative[e[o].type])u=[we(xe(u),t)];else{if((t=w.filter[e[o].type].apply(null,e[o].matches))[S]){for(i=++o;i<n&&!w.relative[e[i].type];i++);return Ee(1<o&&xe(u),1<o&&be(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(W,"$1"),t,o<i&&Ce(e.slice(o,i)),i<n&&Ce(e=e.slice(i)),i<n&&be(e))}u.push(t)}return xe(u)}function Se(v,g){function e(e,t,i,n,s){var a,r,o,l=0,d="0",u=e&&[],c=[],h=x,p=e||b&&w.find.TAG("*",s),f=k+=null==h?1:Math.random()||.1,m=p.length;for(s&&(x=t==E||t||s);d!==m&&null!=(a=p[d]);d++){if(b&&a){for(r=0,t||a.ownerDocument==E||(T(a),i=!C);o=v[r++];)if(o(a,t||E,i)){n.push(a);break}s&&(k=f)}y&&((a=!o&&a)&&l--,e&&u.push(a))}if(l+=d,y&&d!==l){for(r=0;o=g[r++];)o(u,c,t,i);if(e){if(0<l)for(;d--;)u[d]||c[d]||(c[d]=$.call(n));c=Te(c)}N.apply(n,c),s&&!e&&0<c.length&&1<l+g.length&&oe.uniqueSort(n)}return s&&(k=f,x=h),u}var y=0<g.length,b=0<v.length;return y?de(e):e}return ye.prototype=w.filters=w.pseudos,w.setFilters=new ye,f=oe.tokenize=function(e,t){var i,n,s,a,r,o,l,d=P[e+" "];if(d)return t?0:d.slice(0);for(r=e,o=[],l=w.preFilter;r;){for(a in i&&!(n=X.exec(r))||(n&&(r=r.slice(n[0].length)||r),o.push(s=[])),i=!1,(n=V.exec(r))&&(i=n.shift(),s.push({value:i,type:n[0].replace(W," ")}),r=r.slice(i.length)),w.filter)!(n=K[a].exec(r))||l[a]&&!(n=l[a](n))||(i=n.shift(),s.push({value:i,type:a,matches:n}),r=r.slice(i.length));if(!i)break}return t?r.length:r?oe.error(e):P(e,o).slice(0)},h=oe.compile=function(e,t){var i,n=[],s=[],a=L[e+" "];if(!a){for(i=(t=t||f(e)).length;i--;)(a=Ce(t[i]))[S]?n.push(a):s.push(a);(a=L(e,Se(s,n))).selector=e}return a},m=oe.select=function(e,t,i,n){var s,a,r,o,l,d="function"==typeof e&&e,u=!n&&f(e=d.selector||e);if(i=i||[],1===u.length){if(2<(a=u[0]=u[0].slice(0)).length&&"ID"===(r=a[0]).type&&9===t.nodeType&&C&&w.relative[a[1].type]){if(!(t=(w.find.ID(r.matches[0].replace(ne,c),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(s=K.needsContext.test(e)?0:a.length;s--&&(r=a[s],!w.relative[o=r.type]);)if((l=w.find[o])&&(n=l(r.matches[0].replace(ne,c),ie.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(s,1),!(e=n.length&&be(a)))return N.apply(i,n),i;break}}return(d||h(e,u))(n,t,!C,i,!t||ie.test(e)&&ge(t.parentNode)||t),i},p.sortStable=S.split("").sort(D).join("")===S,p.detectDuplicates=!!d,T(),p.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(E.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(H,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),oe}(E);S.find=p,S.expr=p.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=p.uniqueSort,S.text=p.getText,S.isXMLDoc=p.isXML,S.contains=p.contains,S.escapeSelector=p.escape;function f(e,t,i){for(var n=[],s=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&S(e).is(i))break;n.push(e)}return n}function T(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var k=S.expr.match.needsContext;function M(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,i,n){return b(i)?S.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?S.grep(e,function(e){return e===i!==n}):"string"!=typeof i?S.grep(e,function(e){return-1<s.call(i,e)!==n}):S.filter(i,e,n)}S.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?S.find.matchesSelector(n,e)?[n]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,i,n=this.length,s=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<n;t++)if(S.contains(s[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)S.find(e,s[t],i);return 1<n?S.uniqueSort(i):i},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&k.test(e)?S(e):e||[],!1).length}});var z,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,i){var n,s;if(!e)return this;if(i=i||z,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==i.ready?i.ready(e):e(S):S.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),P.test(n[1])&&S.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(s=C.getElementById(n[2]))&&(this[0]=s,this.length=1),this}).prototype=S.fn,z=S(C);var A=/^(?:parents|prev(?:Until|All))/,$={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,s=this.length,a=[],r="string"!=typeof e&&S(e);if(!k.test(e))for(;n<s;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&S.find.matchesSelector(i,e))){a.push(i);break}return this.pushStack(1<a.length?S.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?s.call(S(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(M(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(n,s){S.fn[n]=function(e,t){var i=S.map(this,s,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=S.filter(t,i)),1<this.length&&($[n]||S.uniqueSort(i),A.test(n)&&i.reverse()),this.pushStack(i)}});var N=/[^\x20\t\r\n\f]+/g;function I(e){return e}function j(e){throw e}function H(e,t,i,n){var s;try{e&&b(s=e.promise)?s.call(e).done(t).fail(i):e&&b(s=e.then)?s.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}S.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},S.each(e.match(N)||[],function(e,t){i[t]=!0}),i):S.extend({},n);function s(){for(o=o||n.once,r=a=!0;d.length;u=-1)for(t=d.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&n.stopOnFalse&&(u=l.length,t=!1);n.memory||(t=!1),a=!1,o&&(l=t?[]:"")}var a,t,r,o,l=[],d=[],u=-1,c={add:function(){return l&&(t&&!a&&(u=l.length-1,d.push(t)),function i(e){S.each(e,function(e,t){b(t)?n.unique&&c.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),t&&!a&&s()),this},remove:function(){return S.each(arguments,function(e,t){for(var i;-1<(i=S.inArray(t,l,i));)l.splice(i,1),i<=u&&u--}),this},has:function(e){return e?-1<S.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=d=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=d=[],t||a||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],d.push(t),a||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},S.extend({Deferred:function(e){var a=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],s="pending",r={state:function(){return s},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var s=arguments;return S.Deferred(function(n){S.each(a,function(e,t){var i=b(s[t[4]])&&s[t[4]];o[t[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),s=null}).promise()},then:function(t,i,n){var l=0;function d(s,a,r,o){return function(){function e(){var e,t;if(!(s<l)){if((e=r.apply(i,n))===a.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,d(l,a,I,o),d(l,a,j,o)):(l++,t.call(e,d(l,a,I,o),d(l,a,j,o),d(l,a,I,a.notifyWith))):(r!==I&&(i=void 0,n=[e]),(o||a.resolveWith)(i,n))}}var i=this,n=arguments,t=o?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),l<=s+1&&(r!==j&&(i=void 0,n=[e]),a.rejectWith(i,n))}};s?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),E.setTimeout(t))}}return S.Deferred(function(e){a[0][3].add(d(0,e,b(n)?n:I,e.notifyWith)),a[1][3].add(d(0,e,b(t)?t:I)),a[2][3].add(d(0,e,b(i)?i:j))}).promise()},promise:function(e){return null!=e?S.extend(e,r):r}},o={};return S.each(a,function(e,t){var i=t[2],n=t[5];r[t[1]]=i.add,n&&i.add(function(){s=n},a[3-e][2].disable,a[3-e][3].disable,a[0][2].lock,a[0][3].lock),i.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=i.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){s[t]=this,a[t]=1<arguments.length?o.call(arguments):e,--i||r.resolveWith(s,a)}}var i=arguments.length,n=i,s=Array(n),a=o.call(arguments),r=S.Deferred();if(i<=1&&(H(e,r.done(t(n)).resolve,r.reject,!i),"pending"===r.state()||b(a[n]&&a[n].then)))return r.then();for(;n--;)H(a[n],t(n),r.reject);return r.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){E.console&&E.console.warn&&e&&q.test(e.name)&&E.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){E.setTimeout(function(){throw e})};var B=S.Deferred();function R(){C.removeEventListener("DOMContentLoaded",R),E.removeEventListener("load",R),S.ready()}S.fn.ready=function(e){return B.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||B.resolveWith(C,[S])}}),S.ready.then=B.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?E.setTimeout(S.ready):(C.addEventListener("DOMContentLoaded",R),E.addEventListener("load",R));var F=function(e,t,i,n,s,a,r){var o=0,l=e.length,d=null==i;if("object"===x(i))for(o in s=!0,i)F(e,t,o,i[o],!0,a,r);else if(void 0!==n&&(s=!0,b(n)||(r=!0),d&&(t=r?(t.call(e,n),null):(d=t,function(e,t,i){return d.call(S(e),i)})),t))for(;o<l;o++)t(e[o],i,r?n:n.call(e[o],o,t(e[o],i)));return s?e:d?t.call(e):l?t(e[0],i):a},G=/^-ms-/,W=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(G,"ms-").replace(W,X)}function Y(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function _(){this.expando=S.expando+_.uid++}_.uid=1,_.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,s=this.cache(e);if("string"==typeof t)s[V(t)]=i;else for(n in t)s[V(n)]=t[n];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(V):(t=V(t))in n?[t]:t.match(N)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!S.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var U=new _,K=new _,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,i){var n,s;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:Q.test(s)?JSON.parse(s):s)}catch(e){}K.set(e,t,i)}else i=void 0;return i}S.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return U.access(e,t,i)},_removeData:function(e,t){U.remove(e,t)}}),S.fn.extend({data:function(i,e){var t,n,s,a=this[0],r=a&&a.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):F(this,function(e){var t;if(a&&void 0===e)return void 0!==(t=K.get(a,i))||void 0!==(t=Z(a,i))?t:void 0;this.each(function(){K.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(s=K.get(a),1===a.nodeType&&!U.get(a,"hasDataAttrs"))){for(t=r.length;t--;)r[t]&&0===(n=r[t].name).indexOf("data-")&&(n=V(n.slice(5)),Z(a,n,s[n]));U.set(a,"hasDataAttrs",!0)}return s},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),S.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=U.get(e,t),i&&(!n||Array.isArray(i)?n=U.access(e,t,S.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=S.queue(e,t),n=i.length,s=i.shift(),a=S._queueHooks(e,t);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===t&&i.unshift("inprogress"),delete a.stop,s.call(e,function(){S.dequeue(e,t)},a)),!n&&a&&a.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return U.get(e,i)||U.access(e,i,{empty:S.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",i])})})}}),S.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===i?this:this.each(function(){var e=S.queue(this,t,i);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--s||a.resolveWith(r,[r])}var n,s=1,a=S.Deferred(),r=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=U.get(r[o],e+"queueHooks"))&&n.empty&&(s++,n.empty.add(i));return i(),a.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ne=C.documentElement,se=function(e){return S.contains(e.ownerDocument,e)},ae={composed:!0};ne.getRootNode&&(se=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===S.css(e,"display")};function oe(e,t,i,n){var s,a,r=20,o=n?function(){return n.cur()}:function(){return S.css(e,t,"")},l=o(),d=i&&i[3]||(S.cssNumber[t]?"":"px"),u=e.nodeType&&(S.cssNumber[t]||"px"!==d&&+l)&&te.exec(S.css(e,t));if(u&&u[3]!==d){for(l/=2,d=d||u[3],u=+l||1;r--;)S.style(e,t,u+d),(1-a)*(1-(a=o()/l||.5))<=0&&(r=0),u/=a;u*=2,S.style(e,t,u+d),i=i||[]}return i&&(u=+u||+l||0,s=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=d,n.start=u,n.end=s)),s}var le={};function de(e,t){for(var i,n,s,a,r,o,l,d=[],u=0,c=e.length;u<c;u++)(n=e[u]).style&&(i=n.style.display,t?("none"===i&&(d[u]=U.get(n,"display")||null,d[u]||(n.style.display="")),""===n.style.display&&re(n)&&(d[u]=(l=r=a=void 0,r=(s=n).ownerDocument,o=s.nodeName,(l=le[o])||(a=r.body.appendChild(r.createElement(o)),l=S.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),le[o]=l)))):"none"!==i&&(d[u]="none",U.set(n,"display",i)));for(u=0;u<c;u++)null!=d[u]&&(e[u].style.display=d[u]);return e}S.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?S(this).show():S(this).hide()})}});var ue,ce,he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ue=C.createDocumentFragment().appendChild(C.createElement("div")),(ce=C.createElement("input")).setAttribute("type","radio"),ce.setAttribute("checked","checked"),ce.setAttribute("name","t"),ue.appendChild(ce),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&M(e,t)?S.merge([e],i):i}function ge(e,t){for(var i=0,n=e.length;i<n;i++)U.set(e[i],"globalEval",!t||U.get(t[i],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,y.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,i,n,s){for(var a,r,o,l,d,u,c=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((a=e[p])||0===a)if("object"===x(a))S.merge(h,a.nodeType?[a]:a);else if(ye.test(a)){for(r=r||c.appendChild(t.createElement("div")),o=(pe.exec(a)||["",""])[1].toLowerCase(),l=me[o]||me._default,r.innerHTML=l[1]+S.htmlPrefilter(a)+l[2],u=l[0];u--;)r=r.lastChild;S.merge(h,r.childNodes),(r=c.firstChild).textContent=""}else h.push(t.createTextNode(a));for(c.textContent="",p=0;a=h[p++];)if(n&&-1<S.inArray(a,n))s&&s.push(a);else if(d=se(a),r=ve(c.appendChild(a),"script"),d&&ge(r),i)for(u=0;a=r[u++];)fe.test(a.type||"")&&i.push(a);return c}var we=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Ce(){return!1}function Se(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,n,s,a){var r,o;if("object"==typeof t){for(o in"string"!=typeof i&&(n=n||i,i=void 0),t)ke(e,o,i,n,t[o],a);return e}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Ce;else if(!s)return e;return 1===a&&(r=s,(s=function(e){return S().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=S.guid++)),e.each(function(){S.event.add(this,t,s,n,i)})}function Me(e,s,a){a?(U.set(e,s,!1),S.event.add(e,s,{namespace:!1,handler:function(e){var t,i,n=U.get(this,s);if(1&e.isTrigger&&this[s]){if(n.length)(S.event.special[s]||{}).delegateType&&e.stopPropagation();else if(n=o.call(arguments),U.set(this,s,n),t=a(this,s),this[s](),n!==(i=U.get(this,s))||t?U.set(this,s,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(U.set(this,s,{value:S.event.trigger(S.extend(n[0],S.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,s)&&S.event.add(e,s,Ee)}S.event={global:{},add:function(t,e,i,n,s){var a,r,o,l,d,u,c,h,p,f,m,v=U.get(t);if(Y(t))for(i.handler&&(i=(a=i).handler,s=a.selector),s&&S.find.matchesSelector(ne,s),i.guid||(i.guid=S.guid++),(l=v.events)||(l=v.events=Object.create(null)),(r=v.handle)||(r=v.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(N)||[""]).length;d--;)p=m=(o=Te.exec(e[d])||[])[1],f=(o[2]||"").split(".").sort(),p&&(c=S.event.special[p]||{},p=(s?c.delegateType:c.bindType)||p,c=S.event.special[p]||{},u=S.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&S.expr.match.needsContext.test(s),namespace:f.join(".")},a),(h=l[p])||((h=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,u):h.push(u),S.event.global[p]=!0)},remove:function(e,t,i,n,s){var a,r,o,l,d,u,c,h,p,f,m,v=U.hasData(e)&&U.get(e);if(v&&(l=v.events)){for(d=(t=(t||"").match(N)||[""]).length;d--;)if(p=m=(o=Te.exec(t[d])||[])[1],f=(o[2]||"").split(".").sort(),p){for(c=S.event.special[p]||{},h=l[p=(n?c.delegateType:c.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=a=h.length;a--;)u=h[a],!s&&m!==u.origType||i&&i.guid!==u.guid||o&&!o.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(h.splice(a,1),u.selector&&h.delegateCount--,c.remove&&c.remove.call(e,u));r&&!h.length&&(c.teardown&&!1!==c.teardown.call(e,f,v.handle)||S.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)S.event.remove(e,p+t[d],i,n,!0);S.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,i,n,s,a,r,o=new Array(arguments.length),l=S.event.fix(e),d=(U.get(this,"events")||Object.create(null))[l.type]||[],u=S.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=S.event.handlers.call(this,l,d),t=0;(s=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(a=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(n=((S.event.special[a.origType]||{}).handle||a.handler).apply(s.elem,o))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,s,a,r,o=[],l=t.delegateCount,d=e.target;if(l&&d.nodeType&&!("click"===e.type&&1<=e.button))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||!0!==d.disabled)){for(a=[],r={},i=0;i<l;i++)void 0===r[s=(n=t[i]).selector+" "]&&(r[s]=n.needsContext?-1<S(s,this).index(d):S.find(s,this,null,[d]).length),r[s]&&a.push(n);a.length&&o.push({elem:d,handlers:a})}return d=this,l<t.length&&o.push({elem:d,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&M(t,"input")&&Me(t,"click",Ee),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&M(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&M(t,"input")&&U.get(t,"click")||M(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return Me(this,e,Se),!1},trigger:function(){return Me(this,e),!0},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,s){S.event.special[e]={delegateType:s,bindType:s,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=s),t}}}),S.fn.extend({on:function(e,t,i,n){return ke(this,e,t,i,n)},one:function(e,t,i,n){return ke(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,S(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Ce),this.each(function(){S.event.remove(this,e,i,t)});for(s in e)this.off(s,t,e[s]);return this}});var Pe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return M(e,"table")&&M(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Ae(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $e(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var i,n,s,a,r,o;if(1===t.nodeType){if(U.hasData(e)&&(o=U.get(e).events))for(s in U.remove(t,"handle events"),o)for(i=0,n=o[s].length;i<n;i++)S.event.add(t,s,o[s][i]);K.hasData(e)&&(a=K.access(e),r=S.extend({},a),K.set(t,r))}}function Ne(i,n,s,a){n=v(n);var e,t,r,o,l,d,u=0,c=i.length,h=c-1,p=n[0],f=b(p);if(f||1<c&&"string"==typeof p&&!y.checkClone&&Le.test(p))return i.each(function(e){var t=i.eq(e);f&&(n[0]=p.call(this,e,t.html())),Ne(t,n,s,a)});if(c&&(t=(e=be(n,i[0].ownerDocument,!1,i,a)).firstChild,1===e.childNodes.length&&(e=t),t||a)){for(o=(r=S.map(ve(e,"script"),Ae)).length;u<c;u++)l=e,u!==h&&(l=S.clone(l,!0,!0),o&&S.merge(r,ve(l,"script"))),s.call(i[u],l,u);if(o)for(d=r[r.length-1].ownerDocument,S.map(r,$e),u=0;u<o;u++)l=r[u],fe.test(l.type||"")&&!U.access(l,"globalEval")&&S.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},d):w(l.textContent.replace(ze,""),l,d))}return i}function Ie(e,t,i){for(var n,s=t?S.filter(t,e):e,a=0;null!=(n=s[a]);a++)i||1!==n.nodeType||S.cleanData(ve(n)),n.parentNode&&(i&&se(n)&&ge(ve(n,"script")),n.parentNode.removeChild(n));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,s,a,r,o,l,d,u=e.cloneNode(!0),c=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(r=ve(u),n=0,s=(a=ve(e)).length;n<s;n++)o=a[n],l=r[n],"input"===(d=l.nodeName.toLowerCase())&&he.test(o.type)?l.checked=o.checked:"input"!==d&&"textarea"!==d||(l.defaultValue=o.defaultValue);if(t)if(i)for(a=a||ve(e),r=r||ve(u),n=0,s=a.length;n<s;n++)Oe(a[n],r[n]);else Oe(e,u);return 0<(r=ve(u,"script")).length&&ge(r,!c&&ve(e,"script")),u},cleanData:function(e){for(var t,i,n,s=S.event.special,a=0;void 0!==(i=e[a]);a++)if(Y(i)){if(t=i[U.expando]){if(t.events)for(n in t.events)s[n]?S.event.remove(i,n):S.removeEvent(i,n,t.handle);i[U.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return F(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ne(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Ne(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=De(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return F(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!me[(pe.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(S.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Ne(this,arguments,function(e){var t=this.parentNode;S.inArray(this,i)<0&&(S.cleanData(ve(this)),t&&t.replaceChild(e,this))},i)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,r){S.fn[e]=function(e){for(var t,i=[],n=S(e),s=n.length-1,a=0;a<=s;a++)t=a===s?this:this.clone(!0),S(n[a])[r](t),l.apply(i,t.get());return this.pushStack(i)}});function je(e,t,i){var n,s,a={};for(s in t)a[s]=e.style[s],e.style[s]=t[s];for(s in n=i.call(e),t)e.style[s]=a[s];return n}var He,qe,Be,Re,Fe,Ge,We,Xe,Ve=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ye=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=E),t.getComputedStyle(e)},_e=new RegExp(ie.join("|"),"i");function Ue(){var e;Xe&&(We.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(We).appendChild(Xe),e=E.getComputedStyle(Xe),He="1%"!==e.top,Ge=12===Ke(e.marginLeft),Xe.style.right="60%",Re=36===Ke(e.right),qe=36===Ke(e.width),Xe.style.position="absolute",Be=12===Ke(Xe.offsetWidth/3),ne.removeChild(We),Xe=null)}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,i){var n,s,a,r,o=e.style;return(i=i||Ye(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||se(e)||(r=S.style(e,t)),!y.pixelBoxStyles()&&Ve.test(r)&&_e.test(t)&&(n=o.width,s=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=r,r=i.width,o.width=n,o.minWidth=s,o.maxWidth=a)),void 0!==r?r+"":r}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}We=C.createElement("div"),(Xe=C.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,S.extend(y,{boxSizingReliable:function(){return Ue(),qe},pixelBoxStyles:function(){return Ue(),Re},pixelPosition:function(){return Ue(),He},reliableMarginLeft:function(){return Ue(),Ge},scrollboxSize:function(){return Ue(),Be},reliableTrDimensions:function(){var e,t,i,n;return null==Fe&&(e=C.createElement("table"),t=C.createElement("tr"),i=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ne.appendChild(e).appendChild(t).appendChild(i),n=E.getComputedStyle(t),Fe=3<parseInt(n.height),ne.removeChild(e)),Fe}}));var Ze=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function it(e){var t=S.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Ze.length;i--;)if((e=Ze[i]+t)in et)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,st=/^--/,at={position:"absolute",visibility:"hidden",display:"block"},rt={letterSpacing:"0",fontWeight:"400"};function ot(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function lt(e,t,i,n,s,a){var r="width"===t?1:0,o=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=S.css(e,i+ie[r],!0,s)),n?("content"===i&&(l-=S.css(e,"padding"+ie[r],!0,s)),"margin"!==i&&(l-=S.css(e,"border"+ie[r]+"Width",!0,s))):(l+=S.css(e,"padding"+ie[r],!0,s),"padding"!==i?l+=S.css(e,"border"+ie[r]+"Width",!0,s):o+=S.css(e,"border"+ie[r]+"Width",!0,s));return!n&&0<=a&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-o-.5))||0),l}function dt(e,t,i){var n=Ye(e),s=(!y.boxSizingReliable()||i)&&"border-box"===S.css(e,"boxSizing",!1,n),a=s,r=Qe(e,t,n),o="offset"+t[0].toUpperCase()+t.slice(1);if(Ve.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&s||!y.reliableTrDimensions()&&M(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===S.css(e,"display",!1,n))&&e.getClientRects().length&&(s="border-box"===S.css(e,"boxSizing",!1,n),(a=o in e)&&(r=e[o])),(r=parseFloat(r)||0)+lt(e,t,i||(s?"border":"content"),a,n,r)+"px"}function ut(e,t,i,n,s){return new ut.prototype.init(e,t,i,n,s)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,a,r,o=V(t),l=st.test(t),d=e.style;if(l||(t=it(o)),r=S.cssHooks[t]||S.cssHooks[o],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(e,!1,n))?s:d[t];"string"===(a=typeof i)&&(s=te.exec(i))&&s[1]&&(i=oe(e,t,s),a="number"),null!=i&&i==i&&("number"!==a||l||(i+=s&&s[3]||(S.cssNumber[o]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(d[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?d.setProperty(t,i):d[t]=i))}},css:function(e,t,i,n){var s,a,r,o=V(t);return st.test(t)||(t=it(o)),(r=S.cssHooks[t]||S.cssHooks[o])&&"get"in r&&(s=r.get(e,!0,i)),void 0===s&&(s=Qe(e,t,n)),"normal"===s&&t in rt&&(s=rt[t]),""===i||i?(a=parseFloat(s),!0===i||isFinite(a)?a||0:s):s}}),S.each(["height","width"],function(e,l){S.cssHooks[l]={get:function(e,t,i){if(t)return!nt.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,l,i):je(e,at,function(){return dt(e,l,i)})},set:function(e,t,i){var n,s=Ye(e),a=!y.scrollboxSize()&&"absolute"===s.position,r=(a||i)&&"border-box"===S.css(e,"boxSizing",!1,s),o=i?lt(e,l,i,r,s):0;return r&&a&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(s[l])-lt(e,l,"border",!1,s)-.5)),o&&(n=te.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=S.css(e,l)),ot(0,t,o)}}}),S.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(s,a){S.cssHooks[s+a]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[s+ie[t]+a]=n[t]||n[t-2]||n[0];return i}},"margin"!==s&&(S.cssHooks[s+a].set=ot)}),S.fn.extend({css:function(e,t){return F(this,function(e,t,i){var n,s,a={},r=0;if(Array.isArray(t)){for(n=Ye(e),s=t.length;r<s;r++)a[t[r]]=S.css(e,t[r],!1,n);return a}return void 0!==i?S.style(e,t,i):S.css(e,t)},e,t,1<arguments.length)}}),(S.Tween=ut).prototype={constructor:ut,init:function(e,t,i,n,s,a){this.elem=e,this.prop=i,this.easing=s||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=a||(S.cssNumber[i]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,i=ut.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=ut.prototype.init,S.fx.step={};var ct,ht,pt,ft,mt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function gt(){ht&&(!1===C.hidden&&E.requestAnimationFrame?E.requestAnimationFrame(gt):E.setTimeout(gt,S.fx.interval),S.fx.tick())}function yt(){return E.setTimeout(function(){ct=void 0}),ct=Date.now()}function bt(e,t){var i,n=0,s={height:e};for(t=t?1:0;n<4;n+=2-t)s["margin"+(i=ie[n])]=s["padding"+i]=e;return t&&(s.opacity=s.width=e),s}function wt(e,t,i){for(var n,s=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),a=0,r=s.length;a<r;a++)if(n=s[a].call(i,t,e))return n}function xt(a,e,t){var i,r,n=0,s=xt.prefilters.length,o=S.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ct||yt(),t=Math.max(0,d.startTime+d.duration-e),i=1-(t/d.duration||0),n=0,s=d.tweens.length;n<s;n++)d.tweens[n].run(i);return o.notifyWith(a,[d,i,t]),i<1&&s?t:(s||o.notifyWith(a,[d,1,0]),o.resolveWith(a,[d]),!1)},d=o.promise({elem:a,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:ct||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=S.Tween(a,d.opts,e,t,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(i),i},stop:function(e){var t=0,i=e?d.tweens.length:0;if(r)return this;for(r=!0;t<i;t++)d.tweens[t].run(1);return e?(o.notifyWith(a,[d,1,0]),o.resolveWith(a,[d,e])):o.rejectWith(a,[d,e]),this}}),u=d.props;for(!function(e,t){var i,n,s,a,r;for(i in e)if(s=t[n=V(i)],a=e[i],Array.isArray(a)&&(s=a[1],a=e[i]=a[0]),i!==n&&(e[n]=a,delete e[i]),(r=S.cssHooks[n])&&"expand"in r)for(i in a=r.expand(a),delete e[n],a)i in e||(e[i]=a[i],t[i]=s);else t[n]=s}(u,d.opts.specialEasing);n<s;n++)if(i=xt.prefilters[n].call(d,a,u,d.opts))return b(i.stop)&&(S._queueHooks(d.elem,d.opts.queue).stop=i.stop.bind(i)),i;return S.map(u,wt,d),b(d.opts.start)&&d.opts.start.call(a,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),S.fx.timer(S.extend(l,{elem:a,anim:d,queue:d.opts.queue})),d}S.Animation=S.extend(xt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return oe(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,s=(e=b(e)?(t=e,["*"]):e.match(N)).length;n<s;n++)i=e[n],xt.tweeners[i]=xt.tweeners[i]||[],xt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,s,a,r,o,l,d,u,c="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&re(e),v=U.get(e,"fxshow");for(n in i.queue||(null==(r=S._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,o=r.empty.fire,r.empty.fire=function(){r.unqueued||o()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,S.queue(e,"fx").length||r.empty.fire()})})),t)if(s=t[n],mt.test(s)){if(delete t[n],a=a||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!v||void 0===v[n])continue;m=!0}p[n]=v&&v[n]||S.style(e,n)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(n in c&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=v&&v.display)&&(d=U.get(e,"display")),"none"===(u=S.css(e,"display"))&&(d?u=d:(de([e],!0),d=e.style.display||d,u=S.css(e,"display"),de([e]))),("inline"===u||"inline-block"===u&&null!=d)&&"none"===S.css(e,"float")&&(l||(h.done(function(){f.display=d}),null==d&&(u=f.display,d="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(v?"hidden"in v&&(m=v.hidden):v=U.access(e,"fxshow",{display:d}),a&&(v.hidden=!m),m&&de([e],!0),h.done(function(){for(n in m||de([e]),U.remove(e,"fxshow"),p)S.style(e,n,p[n])})),l=wt(m?v[n]:0,n,h),n in v||(v[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),S.speed=function(e,t,i){var n=e&&"object"==typeof e?S.extend({},e):{complete:i||!i&&t||b(e)&&e,duration:e,easing:i&&t||t&&!b(t)&&t};return S.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in S.fx.speeds?n.duration=S.fx.speeds[n.duration]:n.duration=S.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&S.dequeue(this,n.queue)},n},S.fn.extend({fadeTo:function(e,t,i,n){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function s(){var e=xt(this,S.extend({},t),r);(a||U.get(this,"finish"))&&e.stop(!0)}var a=S.isEmptyObject(t),r=S.speed(e,i,n);return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(s,e,a){function r(e){var t=e.stop;delete e.stop,t(a)}return"string"!=typeof s&&(a=e,e=s,s=void 0),e&&this.queue(s||"fx",[]),this.each(function(){var e=!0,t=null!=s&&s+"queueHooks",i=S.timers,n=U.get(this);if(t)n[t]&&n[t].stop&&r(n[t]);else for(t in n)n[t]&&n[t].stop&&vt.test(t)&&r(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=s&&i[t].queue!==s||(i[t].anim.stop(a),e=!1,i.splice(t,1));!e&&a||S.dequeue(this,s)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var e,t=U.get(this),i=t[r+"queue"],n=t[r+"queueHooks"],s=S.timers,a=i?i.length:0;for(t.finish=!0,S.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===r&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,n){var s=S.fn[n];S.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?s.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),S.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){S.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),S.timers=[],S.fx.tick=function(){var e,t=0,i=S.timers;for(ct=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||S.fx.stop(),ct=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ht||(ht=!0,gt())},S.fx.stop=function(){ht=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(n,e){return n=S.fx&&S.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=E.setTimeout(e,n);t.stop=function(){E.clearTimeout(i)}})},pt=C.createElement("input"),ft=C.createElement("select").appendChild(C.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ft.selected,(pt=C.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var Tt,Et=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return F(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?S.prop(e,t,i):(1===a&&S.isXMLDoc(e)||(s=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?Tt:void 0)),void 0!==i?null===i?void S.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):!(s&&"get"in s&&null!==(n=s.get(e,t)))&&null==(n=S.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&M(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(N);if(s&&1===e.nodeType)for(;i=s[n++];)e.removeAttribute(i)}}),Tt={set:function(e,t,i){return!1===t?S.removeAttr(e,i):e.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var r=Et[t]||S.find.attr;Et[t]=function(e,t,i){var n,s,a=t.toLowerCase();return i||(s=Et[a],Et[a]=n,n=null!=r(e,t,i)?a:null,Et[a]=s),n}});var Ct=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;function kt(e){return(e.match(N)||[]).join(" ")}function Mt(e){return e.getAttribute&&e.getAttribute("class")||""}function Pt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}S.fn.extend({prop:function(e,t){return F(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&S.isXMLDoc(e)||(t=S.propFix[t]||t,s=S.propHooks[t]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i:s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,i,n,s,a,r,o,l=0;if(b(t))return this.each(function(e){S(this).addClass(t.call(this,e,Mt(this)))});if((e=Pt(t)).length)for(;i=this[l++];)if(s=Mt(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;a=e[r++];)n.indexOf(" "+a+" ")<0&&(n+=a+" ");s!==(o=kt(n))&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,n,s,a,r,o,l=0;if(b(t))return this.each(function(e){S(this).removeClass(t.call(this,e,Mt(this)))});if(!arguments.length)return this.attr("class","");if((e=Pt(t)).length)for(;i=this[l++];)if(s=Mt(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;a=e[r++];)for(;-1<n.indexOf(" "+a+" ");)n=n.replace(" "+a+" "," ");s!==(o=kt(n))&&i.setAttribute("class",o)}return this},toggleClass:function(s,t){var a=typeof s,r="string"==a||Array.isArray(s);return"boolean"==typeof t&&r?t?this.addClass(s):this.removeClass(s):b(s)?this.each(function(e){S(this).toggleClass(s.call(this,e,Mt(this),t),t)}):this.each(function(){var e,t,i,n;if(r)for(t=0,i=S(this),n=Pt(s);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==s&&"boolean"!=a||((e=Mt(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==s&&U.get(this,"__className__")||""))})},hasClass:function(e){for(var t,i=0,n=" "+e+" ";t=this[i++];)if(1===t.nodeType&&-1<(" "+kt(Mt(t))+" ").indexOf(n))return!0;return!1}});var Lt=/\r/g;S.fn.extend({val:function(i){var n,e,s,t=this[0];return arguments.length?(s=b(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=s?i.call(this,e,S(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(e){return null==e?"":e+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Lt,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:kt(S.text(e))}},select:{get:function(e){for(var t,i,n=e.options,s=e.selectedIndex,a="select-one"===e.type,r=a?null:[],o=a?s+1:n.length,l=s<0?o:a?s:0;l<o;l++)if(((i=n[l]).selected||l===s)&&!i.disabled&&(!i.parentNode.disabled||!M(i.parentNode,"optgroup"))){if(t=S(i).val(),a)return t;r.push(t)}return r},set:function(e,t){for(var i,n,s=e.options,a=S.makeArray(t),r=s.length;r--;)((n=s[r]).selected=-1<S.inArray(S.valHooks.option.get(n),a))&&(i=!0);return i||(e.selectedIndex=-1),a}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},y.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in E;function zt(e){e.stopPropagation()}var Dt=/^(?:focusinfocus|focusoutblur)$/;S.extend(S.event,{trigger:function(e,t,i,n){var s,a,r,o,l,d,u,c=[i||C],h=g.call(e,"type")?e.type:e,p=g.call(e,"namespace")?e.namespace.split("."):[],f=u=a=i=i||C;if(3!==i.nodeType&&8!==i.nodeType&&!Dt.test(h+S.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),o=h.indexOf(":")<0&&"on"+h,(e=e[S.expando]?e:new S.Event(h,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:S.makeArray(t,[e]),d=S.event.special[h]||{},n||!d.trigger||!1!==d.trigger.apply(i,t))){if(!n&&!d.noBubble&&!m(i)){for(r=d.delegateType||h,Dt.test(r+h)||(f=f.parentNode);f;f=f.parentNode)c.push(f),a=f;a===(i.ownerDocument||C)&&c.push(a.defaultView||a.parentWindow||E)}for(s=0;(f=c[s++])&&!e.isPropagationStopped();)u=f,e.type=1<s?r:d.bindType||h,(l=(U.get(f,"events")||Object.create(null))[e.type]&&U.get(f,"handle"))&&l.apply(f,t),(l=o&&f[o])&&l.apply&&Y(f)&&(e.result=l.apply(f,t),!1===e.result&&e.preventDefault());return e.type=h,n||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(c.pop(),t)||!Y(i)||o&&b(i[h])&&!m(i)&&((a=i[o])&&(i[o]=null),S.event.triggered=h,e.isPropagationStopped()&&u.addEventListener(h,zt),i[h](),e.isPropagationStopped()&&u.removeEventListener(h,zt),S.event.triggered=void 0,a&&(i[o]=a)),e.result}},simulate:function(e,t,i){var n=S.extend(new S.Event,i,{type:e,isSimulated:!0});S.event.trigger(n,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return S.event.trigger(e,t,i,!0)}}),y.focusin||S.each({focus:"focusin",blur:"focusout"},function(i,n){function s(e){S.event.simulate(n,e.target,S.event.fix(e))}S.event.special[n]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n);t||e.addEventListener(i,s,!0),U.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n)-1;t?U.access(e,n,t):(e.removeEventListener(i,s,!0),U.remove(e,n))}}});var At=E.location,$t={guid:Date.now()},Ot=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new E.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var Nt=/\[\]$/,It=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ht=/^(?:input|select|textarea|keygen)/i;function qt(i,e,n,s){var t;if(Array.isArray(e))S.each(e,function(e,t){n||Nt.test(i)?s(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,s)});else if(n||"object"!==x(e))s(i,e);else for(t in e)qt(i+"["+t+"]",e[t],n,s)}S.param=function(e,t){function i(e,t){var i=b(t)?t():t;s[s.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,s=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return s.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Ht.test(this.nodeName)&&!jt.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var i=S(this).val();return null==i?null:Array.isArray(i)?S.map(i,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:i.replace(It,"\r\n")}}).get()}});var Bt=/%20/g,Rt=/#.*$/,Ft=/([?&])_=[^&]*/,Gt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Xt=/^\/\//,Vt={},Yt={},_t="*/".concat("*"),Ut=C.createElement("a");function Kt(a){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,s=e.toLowerCase().match(N)||[];if(b(t))for(;i=s[n++];)"+"===i[0]?(i=i.slice(1)||"*",(a[i]=a[i]||[]).unshift(t)):(a[i]=a[i]||[]).push(t)}}function Qt(t,s,a,r){var o={},l=t===Yt;function d(e){var n;return o[e]=!0,S.each(t[e]||[],function(e,t){var i=t(s,a,r);return"string"!=typeof i||l||o[i]?l?!(n=i):void 0:(s.dataTypes.unshift(i),d(i),!1)}),n}return d(s.dataTypes[0])||!o["*"]&&d("*")}function Jt(e,t){var i,n,s=S.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((s[i]?e:n=n||{})[i]=t[i]);return n&&S.extend(!0,e,n),e}Ut.href=At.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,S.ajaxSettings),t):Jt(S.ajaxSettings,e)},ajaxPrefilter:Kt(Vt),ajaxTransport:Kt(Yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,c,h,i,p,n,f,m,s,a,v=S.ajaxSetup({},t),g=v.context||v,y=v.context&&(g.nodeType||g.jquery)?S(g):S.event,b=S.Deferred(),w=S.Callbacks("once memory"),x=v.statusCode||{},r={},o={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=Gt.exec(h);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(e,t){return null==f&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==f&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),d(0,t),this}};if(b.promise(T),v.url=((e||v.url||At.href)+"").replace(Xt,At.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(N)||[""],null==v.crossDomain){n=C.createElement("a");try{n.href=v.url,n.href=n.href,v.crossDomain=Ut.protocol+"//"+Ut.host!=n.protocol+"//"+n.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=S.param(v.data,v.traditional)),Qt(Vt,v,t,T),f)return T;for(s in(m=S.event&&v.global)&&0==S.active++&&S.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Wt.test(v.type),c=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Bt,"+")):(a=v.url.slice(c.length),v.data&&(v.processData||"string"==typeof v.data)&&(c+=(Ot.test(c)?"&":"?")+v.data,delete v.data),!1===v.cache&&(c=c.replace(Ft,"$1"),a=(Ot.test(c)?"&":"?")+"_="+$t.guid+++a),v.url=c+a),v.ifModified&&(S.lastModified[c]&&T.setRequestHeader("If-Modified-Since",S.lastModified[c]),S.etag[c]&&T.setRequestHeader("If-None-Match",S.etag[c])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+_t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(s,v.headers[s]);if(v.beforeSend&&(!1===v.beforeSend.call(g,T,v)||f))return T.abort();if(l="abort",w.add(v.complete),T.done(v.success),T.fail(v.error),u=Qt(Yt,v,t,T)){if(T.readyState=1,m&&y.trigger("ajaxSend",[T,v]),f)return T;v.async&&0<v.timeout&&(p=E.setTimeout(function(){T.abort("timeout")},v.timeout));try{f=!1,u.send(r,d)}catch(e){if(f)throw e;d(-1,e)}}else d(-1,"No Transport");function d(e,t,i,n){var s,a,r,o,l,d=t;f||(f=!0,p&&E.clearTimeout(p),u=void 0,h=n||"",T.readyState=0<e?4:0,s=200<=e&&e<300||304===e,i&&(o=function(e,t,i){for(var n,s,a,r,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(s in o)if(o[s]&&o[s].test(n)){l.unshift(s);break}if(l[0]in i)a=l[0];else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){a=s;break}r=r||s}a=a||r}if(a)return a!==l[0]&&l.unshift(a),i[a]}(v,T,i)),!s&&-1<S.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),o=function(e,t,i,n){var s,a,r,o,l,d={},u=e.dataTypes.slice();if(u[1])for(r in e.converters)d[r.toLowerCase()]=e.converters[r];for(a=u.shift();a;)if(e.responseFields[a]&&(i[e.responseFields[a]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=u.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(r=d[l+" "+a]||d["* "+a]))for(s in d)if((o=s.split(" "))[1]===a&&(r=d[l+" "+o[0]]||d["* "+o[0]])){!0===r?r=d[s]:!0!==d[s]&&(a=o[0],u.unshift(o[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(v,o,T,s),s?(v.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(S.lastModified[c]=l),(l=T.getResponseHeader("etag"))&&(S.etag[c]=l)),204===e||"HEAD"===v.type?d="nocontent":304===e?d="notmodified":(d=o.state,a=o.data,s=!(r=o.error))):(r=d,!e&&d||(d="error",e<0&&(e=0))),T.status=e,T.statusText=(t||d)+"",s?b.resolveWith(g,[a,d,T]):b.rejectWith(g,[T,d,r]),T.statusCode(x),x=void 0,m&&y.trigger(s?"ajaxSuccess":"ajaxError",[T,v,s?a:r]),w.fireWith(g,[T,d]),m&&(y.trigger("ajaxComplete",[T,v]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return S.get(e,t,i,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,s){S[s]=function(e,t,i,n){return b(t)&&(n=n||i,i=t,t=void 0),S.ajax(S.extend({url:e,type:s,dataType:n,data:t,success:i},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,i){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,i)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(e){S(this).wrapInner(i.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=b(t);return this.each(function(e){S(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new E.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},ei=S.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,S.ajaxTransport(function(s){var a,r;if(y.cors||ei&&!s.crossDomain)return{send:function(e,t){var i,n=s.xhr();if(n.open(s.type,s.url,s.async,s.username,s.password),s.xhrFields)for(i in s.xhrFields)n[i]=s.xhrFields[i];for(i in s.mimeType&&n.overrideMimeType&&n.overrideMimeType(s.mimeType),s.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);a=function(e){return function(){a&&(a=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Zt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=a(),r=n.onerror=n.ontimeout=a("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&E.setTimeout(function(){a&&r()})},a=a("abort");try{n.send(s.hasContent&&s.data||null)}catch(e){if(a)throw e}},abort:function(){a&&a()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(i){var n,s;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=S("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",s=function(e){n.remove(),s=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(n[0])},abort:function(){s&&s()}}});var ti,ii=[],ni=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||S.expando+"_"+$t.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,i){var n,s,a,r=!1!==e.jsonp&&(ni.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(e.data)&&"data");if(r||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(ni,"$1"+n):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return a||S.error(n+" was not called"),a[0]},e.dataTypes[0]="json",s=E[n],E[n]=function(){a=arguments},i.always(function(){void 0===s?S(E).removeProp(n):E[n]=s,e[n]&&(e.jsonpCallback=t.jsonpCallback,ii.push(n)),a&&b(s)&&s(a[0]),a=s=void 0}),"script"}),y.createHTMLDocument=((ti=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),S.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(n)):t=C),a=!i&&[],(s=P.exec(e))?[t.createElement(s[1])]:(s=be([e],t,a),a&&a.length&&S(a).remove(),S.merge([],s.childNodes)));var n,s,a},S.fn.load=function(e,t,i){var n,s,a,r=this,o=e.indexOf(" ");return-1<o&&(n=kt(e.slice(o)),e=e.slice(0,o)),b(t)?(i=t,t=void 0):t&&"object"==typeof t&&(s="POST"),0<r.length&&S.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){a=arguments,r.html(n?S("<div>").append(S.parseHTML(e)).find(n):e)}).always(i&&function(e,t){r.each(function(){i.apply(this,a||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,i){var n,s,a,r,o,l,d=S.css(e,"position"),u=S(e),c={};"static"===d&&(e.style.position="relative"),o=u.offset(),a=S.css(e,"top"),l=S.css(e,"left"),s=("absolute"===d||"fixed"===d)&&-1<(a+l).indexOf("auto")?(r=(n=u.position()).top,n.left):(r=parseFloat(a)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,i,S.extend({},o))),null!=t.top&&(c.top=t.top-o.top+r),null!=t.left&&(c.left=t.left-o.left+s),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),u.css(c))}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],s={top:0,left:0};if("fixed"===S.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((s=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),s.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-S.css(n,"marginTop",!0),left:t.left-s.left-S.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ne})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,s){var a="pageYOffset"===s;S.fn[t]=function(e){return F(this,function(e,t,i){var n;if(m(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[s]:e[t];n?n.scrollTo(a?n.pageXOffset:i,a?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),S.each(["top","left"],function(e,i){S.cssHooks[i]=Je(y.pixelPosition,function(e,t){if(t)return t=Qe(e,i),Ve.test(t)?S(e).position()[i]+"px":t})}),S.each({Height:"height",Width:"width"},function(r,o){S.each({padding:"inner"+r,content:o,"":"outer"+r},function(n,a){S.fn[a]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),s=n||(!0===e||!0===t?"margin":"border");return F(this,function(e,t,i){var n;return m(e)?0===a.indexOf("outer")?e["inner"+r]:e.document.documentElement["client"+r]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+r],n["scroll"+r],e.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?S.css(e,t,s):S.style(e,t,i,s)},o,i?e:void 0,i)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){S.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var si=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),b(e))return n=o.call(arguments,2),(s=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||S.guid++,s},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=M,S.isFunction=b,S.isWindow=m,S.camelCase=V,S.type=x,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(si,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var ai=E.jQuery,ri=E.$;return S.noConflict=function(e){return E.$===S&&(E.$=ri),e&&E.jQuery===S&&(E.jQuery=ai),S},void 0===e&&(E.jQuery=E.$=S),S}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function s(t,i){void 0===t&&(t={}),void 0===i&&(i={}),Object.keys(i).forEach(function(e){void 0===t[e]?t[e]=i[e]:n(i[e])&&n(t[e])&&0<Object.keys(i[e]).length&&s(t[e],i[e])})}var m="undefined"!=typeof document?document:{},e={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};s(m,e);var se="undefined"!=typeof window?window:{};s(se,{document:e,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});var l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function z(e,t){var i=[],n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,a,r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var o="div";for(0===r.indexOf("<li")&&(o="ul"),0===r.indexOf("<tr")&&(o="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(o="tr"),0===r.indexOf("<tbody")&&(o="table"),0===r.indexOf("<option")&&(o="select"),(a=m.createElement(o)).innerHTML=r,n=0;n<a.childNodes.length;n+=1)i.push(a.childNodes[n])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||m).querySelectorAll(e.trim()):[m.getElementById(e.trim().split("#")[1])],n=0;n<s.length;n+=1)s[n]&&i.push(s[n])}else if(e.nodeType||e===se||e===m)i.push(e);else if(0<e.length&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function a(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}z.fn=l.prototype,z.Class=l,z.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(e,t);else for(var s in e)this[n][s]=e[s],this[n].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],a=e[1],r=e[2],n=e[3];function s(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),z(t).is(a))r.apply(t,i);else for(var n=z(t).parents(),s=0;s<n.length;s+=1)z(n[s]).is(a)&&r.apply(n[s],i)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&(i=e[0],r=e[1],n=e[2],a=void 0),n=n||!1;for(var l,d=i.split(" "),u=0;u<this.length;u+=1){var c=this[u];if(a)for(l=0;l<d.length;l+=1){var h=d[l];c.dom7LiveListeners||(c.dom7LiveListeners={}),c.dom7LiveListeners[h]||(c.dom7LiveListeners[h]=[]),c.dom7LiveListeners[h].push({listener:r,proxyListener:s}),c.addEventListener(h,s,n)}else for(l=0;l<d.length;l+=1){var p=d[l];c.dom7Listeners||(c.dom7Listeners={}),c.dom7Listeners[p]||(c.dom7Listeners[p]=[]),c.dom7Listeners[p].push({listener:r,proxyListener:o}),c.addEventListener(p,o,n)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],n=e[1],s=e[2],a=e[3];"function"==typeof e[1]&&(i=e[0],s=e[1],a=e[2],n=void 0),a=a||!1;for(var r=i.split(" "),o=0;o<r.length;o+=1)for(var l=r[o],d=0;d<this.length;d+=1){var u=this[d],c=void 0;if(!n&&u.dom7Listeners?c=u.dom7Listeners[l]:n&&u.dom7LiveListeners&&(c=u.dom7LiveListeners[l]),c&&c.length)for(var h=c.length-1;0<=h;--h){var p=c[h];!(s&&p.listener===s||s&&p.listener&&p.listener.dom7proxy&&p.listener.dom7proxy===s)&&s||(u.removeEventListener(l,p.proxyListener,a),c.splice(h,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),n=e[1],s=0;s<i.length;s+=1)for(var a=i[s],r=0;r<this.length;r+=1){var o=this[r],l=void 0;try{l=new se.CustomEvent(a,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(l=m.createEvent("Event")).initEvent(a,!0,!0),l.detail=n}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var i,n=["webkitTransitionEnd","transitionend"],s=this;function a(e){if(e.target===this)for(t.call(this,e),i=0;i<n.length;i+=1)s.off(n[i],a)}if(t)for(i=0;i<n.length;i+=1)s.on(n[i],a);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=m.body,n=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,a=e===se?se.scrollY:e.scrollTop,r=e===se?se.scrollX:e.scrollLeft;return{top:t.top+a-n,left:t.left+r-s}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return se.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=z(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===m)return n===m;if(e===se)return n===se;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=0;n<t.length;n+=1){e=t[n];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var a=m.createElement("div");for(a.innerHTML=e;a.firstChild;)this[s].appendChild(a.firstChild)}else if(e instanceof l)for(var r=0;r<e.length;r+=1)this[s].appendChild(e[r]);else this[s].appendChild(e)}return this},prepend:function(e){for(var t,i=0;i<this.length;i+=1)if("string"==typeof e){var n=m.createElement("div");for(n.innerHTML=e,t=n.childNodes.length-1;0<=t;--t)this[i].insertBefore(n.childNodes[t],this[i].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[i].insertBefore(e[t],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&z(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e&&!z(n).is(e)||t.push(n),i=n}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&z(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e&&!z(n).is(e)||t.push(n),i=n}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!z(this[i].parentNode).is(e)||t.push(this[i].parentNode);return z(a(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e&&!z(n).is(e)||t.push(n),n=n.parentNode;return z(a(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),s=0;s<n.length;s+=1)t.push(n[s]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].childNodes,s=0;s<n.length;s+=1)e?1===n[s].nodeType&&z(n[s]).is(e)&&t.push(n[s]):1===n[s].nodeType&&t.push(n[s]);return new l(a(t))},filter:function(e){for(var t=[],i=0;i<this.length;i+=1)e.call(this[i],i,this[i])&&t.push(this[i]);return new l(t)},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=0;i<e.length;i+=1)for(var n=z(e[i]),s=0;s<n.length;s+=1)this[this.length]=n[s],this.length+=1;return this},styles:function(){return this[0]?se.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){z.fn[e]=z.fn[e]||t[e]});function i(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var ae={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,n,s;void 0===t&&(t="x");var a=se.getComputedStyle(e,null);return se.WebKitCSSMatrix?(6<(n=a.transform||a.webkitTransform).split(",").length&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new se.WebKitCSSMatrix("none"===n?"":n)):i=(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=se.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=se.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,s,a={},r=e||se.location.href;if("string"==typeof r&&r.length)for(s=(i=(r=-1<r.indexOf("?")?r.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)n=i[t].replace(/#\S+/g,"").split("="),a[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return a},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var s=e[n];if(null!=s)for(var a=Object.keys(Object(s)),r=0,o=a.length;r<o;r+=1){var l=a[r],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(ae.isObject(i[l])&&ae.isObject(s[l])?ae.extend(i[l],s[l]):!ae.isObject(i[l])&&ae.isObject(s[l])?(i[l]={},ae.extend(i[l],s[l])):i[l]=s[l])}}return i}},S={touch:!!("ontouchstart"in se||se.DocumentTouch&&m instanceof se.DocumentTouch),pointerEvents:!!se.PointerEvent&&"maxTouchPoints"in se.navigator&&0<=se.navigator.maxTouchPoints,observer:"MutationObserver"in se||"WebkitMutationObserver"in se,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});se.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in se},r={components:{configurable:!0}};i.prototype.on=function(e,t,i){var n=this;if("function"!=typeof t)return n;var s=i?"unshift":"push";return e.split(" ").forEach(function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)}),n},i.prototype.once=function(i,n,e){var s=this;if("function"!=typeof n)return s;function a(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];s.off(i,a),a.f7proxy&&delete a.f7proxy,n.apply(s,e)}return a.f7proxy=n,s.on(i,a,e)},i.prototype.off=function(e,n){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(i){void 0===n?s.eventsListeners[i]=[]:s.eventsListeners[i]&&s.eventsListeners[i].length&&s.eventsListeners[i].forEach(function(e,t){(e===n||e.f7proxy&&e.f7proxy===n)&&s.eventsListeners[i].splice(t,1)})}),s},i.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n,s,a=this;return a.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),a):(i=e[0].events,n=e[0].data,e[0].context||a),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){var t;a.eventsListeners&&a.eventsListeners[e]&&(t=[],a.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,n)}))})),a},i.prototype.useModulesParams=function(i){var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var t=n.modules[e];t.params&&ae.extend(i,t.params)})},i.prototype.useModules=function(n){void 0===n&&(n={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var i=s.modules[e],t=n[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];s[e]="function"==typeof t?t.bind(s):t}),i.on&&s.on&&Object.keys(i.on).forEach(function(e){s.on(e,i.on[e])}),i.create&&i.create.bind(s)(t)})},r.components.set=function(e){this.use&&this.use(e)},i.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var s=t.name||Object.keys(n.prototype.modules).length+"_"+ae.now();return(n.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},i.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(i,r);var o,d,u,c,h,p,f,v,g,y,b,w,x,T,E,C={updateSize:function(){var e=this.$el,t=void 0!==this.params.width?this.params.width:e[0].clientWidth,i=void 0!==this.params.height?this.params.height:e[0].clientHeight;0===t&&this.isHorizontal()||0===i&&this.isVertical()||(t=t-parseInt(e.css("padding-left"),10)-parseInt(e.css("padding-right"),10),i=i-parseInt(e.css("padding-top"),10)-parseInt(e.css("padding-bottom"),10),ae.extend(this,{width:t,height:i,size:this.isHorizontal()?t:i}))},updateSlides:function(){var t=this.params,e=this.$wrapperEl,i=this.size,n=this.rtlTranslate,s=this.wrongRTL,a=this.virtual&&t.virtual.enabled,r=a?this.virtual.slides.length:this.slides.length,o=e.children("."+this.params.slideClass),l=a?this.virtual.slides.length:o.length,d=[],u=[],c=[];function h(e){return!t.cssMode||e!==o.length-1}var p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(this));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(this));var m,v=this.snapGrid.length,g=this.snapGrid.length,y=t.spaceBetween,b=-p,w=0,x=0;if(void 0!==i){"string"==typeof y&&0<=y.indexOf("%")&&(y=parseFloat(y.replace("%",""))/100*i),this.virtualSize=-y,n?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(m=Math.floor(l/t.slidesPerColumn)===l/this.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(m=Math.max(m,t.slidesPerView*t.slidesPerColumn)));for(var T,E,C,S,k,M=t.slidesPerColumn,P=m/M,L=Math.floor(l/t.slidesPerColumn),z=0;z<l;z+=1){V=0;var D,A,$,O,N,I,j,H,q,B,R,F,G,W,X,V,Y,_,U,K,Q,J,Z=o.eq(z);1<t.slidesPerColumn&&(A=D=I=void 0,"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?($=Math.floor(z/(t.slidesPerGroup*t.slidesPerColumn)),O=z-t.slidesPerColumn*t.slidesPerGroup*$,N=0===$?t.slidesPerGroup:Math.min(Math.ceil((l-$*M*t.slidesPerGroup)/M),t.slidesPerGroup),I=(D=O-(A=Math.floor(O/N))*N+$*t.slidesPerGroup)+A*m/M,Z.css({"-webkit-box-ordinal-group":I,"-moz-box-ordinal-group":I,"-ms-flex-order":I,"-webkit-order":I,order:I})):"column"===t.slidesPerColumnFill?(A=z-(D=Math.floor(z/M))*M,(L<D||D===L&&A===M-1)&&(A+=1)>=M&&(A=0,D+=1)):D=z-(A=Math.floor(z/P))*P,Z.css("margin-"+(this.isHorizontal()?"top":"left"),0!==A&&t.spaceBetween&&t.spaceBetween+"px")),"none"!==Z.css("display")&&("auto"===t.slidesPerView?(j=se.getComputedStyle(Z[0],null),H=Z[0].style.transform,q=Z[0].style.webkitTransform,H&&(Z[0].style.transform="none"),q&&(Z[0].style.webkitTransform="none"),V=t.roundLengths?this.isHorizontal()?Z.outerWidth(!0):Z.outerHeight(!0):this.isHorizontal()?(B=parseFloat(j.getPropertyValue("width")),R=parseFloat(j.getPropertyValue("padding-left")),F=parseFloat(j.getPropertyValue("padding-right")),G=parseFloat(j.getPropertyValue("margin-left")),W=parseFloat(j.getPropertyValue("margin-right")),(X=j.getPropertyValue("box-sizing"))&&"border-box"===X?B+G+W:B+R+F+G+W):(Y=parseFloat(j.getPropertyValue("height")),_=parseFloat(j.getPropertyValue("padding-top")),U=parseFloat(j.getPropertyValue("padding-bottom")),K=parseFloat(j.getPropertyValue("margin-top")),Q=parseFloat(j.getPropertyValue("margin-bottom")),(J=j.getPropertyValue("box-sizing"))&&"border-box"===J?Y+K+Q:Y+_+U+K+Q),H&&(Z[0].style.transform=H),q&&(Z[0].style.webkitTransform=q),t.roundLengths&&(V=Math.floor(V))):(V=(i-(t.slidesPerView-1)*y)/t.slidesPerView,t.roundLengths&&(V=Math.floor(V)),o[z]&&(this.isHorizontal()?o[z].style.width=V+"px":o[z].style.height=V+"px")),o[z]&&(o[z].swiperSlideSize=V),c.push(V),t.centeredSlides?(b=b+V/2+w/2+y,0===w&&0!==z&&(b=b-i/2-y),0===z&&(b=b-i/2-y),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),x%t.slidesPerGroup==0&&d.push(b),u.push(b)):(t.roundLengths&&(b=Math.floor(b)),(x-Math.min(this.params.slidesPerGroupSkip,x))%this.params.slidesPerGroup==0&&d.push(b),u.push(b),b=b+V+y),this.virtualSize+=V+y,w=V,x+=1)}if(this.virtualSize=Math.max(this.virtualSize,i)+f,n&&s&&("slide"===t.effect||"coverflow"===t.effect)&&e.css({width:this.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(this.virtualSize=(V+t.spaceBetween)*m,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){T=[];for(var ee=0;ee<d.length;ee+=1){var te=d[ee];t.roundLengths&&(te=Math.floor(te)),d[ee]<this.virtualSize+d[0]&&T.push(te)}d=T}if(!t.centeredSlides){T=[];for(var ie=0;ie<d.length;ie+=1){var ne=d[ie];t.roundLengths&&(ne=Math.floor(ne)),d[ie]<=this.virtualSize-i&&T.push(ne)}d=T,1<Math.floor(this.virtualSize-i)-Math.floor(d[d.length-1])&&d.push(this.virtualSize-i)}0===d.length&&(d=[0]),0!==t.spaceBetween&&(this.isHorizontal()?n?o.filter(h).css({marginLeft:y+"px"}):o.filter(h).css({marginRight:y+"px"}):o.filter(h).css({marginBottom:y+"px"})),t.centeredSlides&&t.centeredSlidesBounds&&(E=0,c.forEach(function(e){E+=e+(t.spaceBetween?t.spaceBetween:0)}),C=(E-=t.spaceBetween)-i,d=d.map(function(e){return e<0?-p:C<e?C+f:e})),t.centerInsufficientSlides&&(S=0,c.forEach(function(e){S+=e+(t.spaceBetween?t.spaceBetween:0)}),(S-=t.spaceBetween)<i&&(k=(i-S)/2,d.forEach(function(e,t){d[t]=e-k}),u.forEach(function(e,t){u[t]=e+k}))),ae.extend(this,{slides:o,snapGrid:d,slidesGrid:u,slidesSizesGrid:c}),l!==r&&this.emit("slidesLengthChange"),d.length!==v&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),u.length!==g&&this.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i,n=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&1<this.params.slidesPerView)if(this.params.centeredSlides)this.visibleSlides.each(function(e,t){n.push(t)});else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var a=this.activeIndex+t;if(a>this.slides.length)break;n.push(this.slides.eq(a)[0])}else n.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<n.length;t+=1){void 0!==n[t]&&(s=s<(i=n[t].offsetHeight)?i:s)}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,n=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var s=n?e:-e;i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var a=0;a<i.length;a+=1){var r,o,l=i[a],d=(s+(t.centeredSlides?this.minTranslate():0)-l.swiperSlideOffset)/(l.swiperSlideSize+t.spaceBetween);(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight)&&(o=(r=-(s-l.swiperSlideOffset))+this.slidesSizesGrid[a],(0<=r&&r<this.size-1||1<o&&o<=this.size||r<=0&&o>=this.size)&&(this.visibleSlides.push(l),this.visibleSlidesIndexes.push(a),i.eq(a).addClass(t.slideVisibleClass))),l.progress=n?-d:d}this.visibleSlides=z(this.visibleSlides)}},updateProgress:function(e){var t;void 0===e&&(t=this.rtlTranslate?-1:1,e=this&&this.translate&&this.translate*t||0);var i=this.params,n=this.maxTranslate()-this.minTranslate(),s=this.progress,a=this.isBeginning,r=a,o=l=this.isEnd,l=0==n?a=!(s=0):(a=(s=(e-this.minTranslate())/n)<=0,1<=s);ae.extend(this,{progress:s,isBeginning:a,isEnd:l}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),a&&!r&&this.emit("reachBeginning toEdge"),l&&!o&&this.emit("reachEnd toEdge"),(r&&!a||o&&!l)&&this.emit("fromEdge"),this.emit("progress",s)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,n=this.$wrapperEl,s=this.activeIndex,a=this.realIndex,r=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=r?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+s+'"]'):t.eq(s)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i,n,s=this.rtlTranslate?this.translate:-this.translate,a=this.slidesGrid,r=this.snapGrid,o=this.params,l=this.activeIndex,d=this.realIndex,u=this.snapIndex,c=e;if(void 0===c){for(var h=0;h<a.length;h+=1)void 0!==a[h+1]?s>=a[h]&&s<a[h+1]-(a[h+1]-a[h])/2?c=h:s>=a[h]&&s<a[h+1]&&(c=h+1):s>=a[h]&&(c=h);o.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}(i=0<=r.indexOf(s)?r.indexOf(s):(t=Math.min(o.slidesPerGroupSkip,c))+Math.floor((c-t)/o.slidesPerGroup))>=r.length&&(i=r.length-1),c!==l?(n=parseInt(this.slides.eq(c).attr("data-swiper-slide-index")||c,10),ae.extend(this,{snapIndex:i,realIndex:n,previousIndex:l,activeIndex:c}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),d!==n&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")):i!==u&&(this.snapIndex=i,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=z(e.target).closest("."+t.slideClass)[0],n=!1;if(i)for(var s=0;s<this.slides.length;s+=1)this.slides[s]===i&&(n=!0);if(!i||!n)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(z(i).attr("data-swiper-slide-index"),10):this.clickedIndex=z(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},k={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,n=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return i?-n:n;if(t.cssMode)return n;var a=ae.getTranslate(s[0],e);return i&&(a=-a),a||0},setTranslate:function(e,t){var i=this.rtlTranslate,n=this.params,s=this.$wrapperEl,a=this.wrapperEl,r=this.progress,o=0,l=0;this.isHorizontal()?o=i?-e:e:l=e,n.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),n.cssMode?a[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-o:-l:n.virtualTranslate||s.transform("translate3d("+o+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?o:l;var d=this.maxTranslate()-this.minTranslate();(0==d?0:(e-this.minTranslate())/d)!==r&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,n,s){var a;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);var r=this,o=r.params,l=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var d=r.minTranslate(),u=r.maxTranslate(),c=n&&d<e?d:n&&e<u?u:e;if(r.updateProgress(c),o.cssMode){var h=r.isHorizontal();return 0!==t&&l.scrollTo?l.scrollTo(((a={})[h?"left":"top"]=-c,a.behavior="smooth",a)):l[h?"scrollLeft":"scrollTop"]=-c,!0}return 0===t?(r.setTransition(0),r.setTranslate(c),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},M={slideTo:function(e,t,i,n){var s;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=this,r=e;r<0&&(r=0);var o=a.params,l=a.snapGrid,d=a.slidesGrid,u=a.previousIndex,c=a.activeIndex,h=a.rtlTranslate,p=a.wrapperEl;if(a.animating&&o.preventInteractionOnTransition)return!1;var f=Math.min(a.params.slidesPerGroupSkip,r),m=f+Math.floor((r-f)/a.params.slidesPerGroup);m>=l.length&&(m=l.length-1),(c||o.initialSlide||0)===(u||0)&&i&&a.emit("beforeSlideChangeStart");var v,g=-l[m];if(a.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<d.length;y+=1)-Math.floor(100*g)>=Math.floor(100*d[y])&&(r=y);if(a.initialized&&r!==c){if(!a.allowSlideNext&&g<a.translate&&g<a.minTranslate())return!1;if(!a.allowSlidePrev&&g>a.translate&&g>a.maxTranslate()&&(c||0)!==r)return!1}if(v=c<r?"next":r<c?"prev":"reset",h&&-g===a.translate||!h&&g===a.translate)return a.updateActiveIndex(r),o.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==o.effect&&a.setTranslate(g),"reset"!=v&&(a.transitionStart(i,v),a.transitionEnd(i,v)),!1;if(o.cssMode){var b=a.isHorizontal(),w=-g;return h&&(w=p.scrollWidth-p.offsetWidth-w),0!==t&&p.scrollTo?p.scrollTo(((s={})[b?"left":"top"]=w,s.behavior="smooth",s)):p[b?"scrollLeft":"scrollTop"]=w,!0}return 0===t?(a.setTransition(0),a.setTranslate(g),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,v),a.transitionEnd(i,v)):(a.setTransition(t),a.setTranslate(g),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,v),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,v))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.activeIndex<n.slidesPerGroupSkip?1:n.slidesPerGroup;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.snapGrid,r=this.slidesGrid,o=this.rtlTranslate;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,u=l(o?this.translate:-this.translate),c=a.map(l),h=(r.map(l),a[c.indexOf(u)],a[c.indexOf(u)-1]);return void 0===h&&n.cssMode&&a.forEach(function(e){!h&&e<=u&&(h=e)}),void 0!==h&&(d=r.indexOf(h))<0&&(d=this.activeIndex-1),this.slideTo(d,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);var s,a,r=this.activeIndex,o=Math.min(this.params.slidesPerGroupSkip,r),l=o+Math.floor((r-o)/this.params.slidesPerGroup),d=this.rtlTranslate?this.translate:-this.translate;return d>=this.snapGrid[l]?d-(s=this.snapGrid[l])>(this.snapGrid[l+1]-s)*n&&(r+=this.params.slidesPerGroup):d-(a=this.snapGrid[l-1])<=(this.snapGrid[l]-a)*n&&(r-=this.params.slidesPerGroup),r=Math.max(r,0),r=Math.min(r,this.slidesGrid.length-1),this.slideTo(r,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,a=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(z(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?a<t.loopedSlides-s/2||a>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a):a>t.slides.length-s?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a)}else t.slideTo(a)}},P={loopCreate:function(){var n=this,e=n.params,t=n.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-s.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var a=0;a<i;a+=1){var r=z(m.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(r)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),n.loopedSlides=Math.ceil(parseFloat(e.loopedSlides||e.slidesPerView,10)),n.loopedSlides+=e.loopAdditionalSlides,n.loopedSlides>s.length&&(n.loopedSlides=s.length);var o=[],l=[];s.each(function(e,t){var i=z(t);e<n.loopedSlides&&l.push(t),e<s.length&&e>=s.length-n.loopedSlides&&o.push(t),i.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(z(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var u=o.length-1;0<=u;--u)t.prepend(z(o[u].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,n=this.loopedSlides,s=this.allowSlidePrev,a=this.allowSlideNext,r=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-r[t]-this.getTranslate();t<n?(e=i.length-3*n+t,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)):t>=i.length-n&&(e=-i.length+t+n,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)),this.allowSlidePrev=s,this.allowSlideNext=a,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},L={setGrabCursor:function(e){var t;S.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){S.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},D={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var n=0;n<e.length;n+=1)e[n]&&t.append(e[n]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&S.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&this.loopDestroy();var s=n+1;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)e[a]&&i.prepend(e[a]);s=n+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&S.observer||this.update(),this.slideTo(s,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,n=this.params,s=this.activeIndex;n.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+n.slideClass));var a=this.slides.length;if(e<=0)this.prependSlide(t);else if(a<=e)this.appendSlide(t);else{for(var r=e<s?s+1:s,o=[],l=a-1;e<=l;--l){var d=this.slides.eq(l);d.remove(),o.unshift(d)}if("object"==typeof t&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&i.append(t[u]);r=e<s?s+t.length:s}else i.append(t);for(var c=0;c<o.length;c+=1)i.append(o[c]);n.loop&&this.loopCreate(),n.observer&&S.observer||this.update(),n.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&(n-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var s,a=n;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)s=e[r],this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a;a=Math.max(a,0)}else s=e,this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a,a=Math.max(a,0);t.loop&&this.loopCreate(),t.observer&&S.observer||this.update(),t.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},A=(o=se.navigator.platform,d=se.navigator.userAgent,u={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!se.cordova&&!se.phonegap),phonegap:!(!se.cordova&&!se.phonegap),electron:!1},c=se.screen.width,h=se.screen.height,p=d.match(/(Android);?[\s\/]+([\d.]+)?/),f=d.match(/(iPad).*OS\s([\d_]+)/),v=d.match(/(iPod)(.*OS\s([\d_]+))?/),g=!f&&d.match(/(iPhone\sOS|iOS)\s([\d_]+)/),y=0<=d.indexOf("MSIE ")||0<=d.indexOf("Trident/"),b=0<=d.indexOf("Edge/"),w=0<=d.indexOf("Gecko/")&&0<=d.indexOf("Firefox/"),x="Win32"===o,T=0<=d.toLowerCase().indexOf("electron"),E="MacIntel"===o,!f&&E&&S.touch&&(1024===c&&1366===h||834===c&&1194===h||834===c&&1112===h||768===c&&1024===h)&&(f=d.match(/(Version)\/([\d.]+)/),E=!1),u.ie=y,u.edge=b,u.firefox=w,p&&!x&&(u.os="android",u.osVersion=p[2],u.android=!0,u.androidChrome=0<=d.toLowerCase().indexOf("chrome")),(f||g||v)&&(u.os="ios",u.ios=!0),g&&!v&&(u.osVersion=g[2].replace(/_/g,"."),u.iphone=!0),f&&(u.osVersion=f[2].replace(/_/g,"."),u.ipad=!0),v&&(u.osVersion=v[3]?v[3].replace(/_/g,"."):null,u.ipod=!0),u.ios&&u.osVersion&&0<=d.indexOf("Version/")&&"10"===u.osVersion.split(".")[0]&&(u.osVersion=d.toLowerCase().split("version/")[1].split(" ")[0]),u.webView=!(!(g||f||v)||!d.match(/.*AppleWebKit(?!.*Safari)/i)&&!se.navigator.standalone)||se.matchMedia&&se.matchMedia("(display-mode: standalone)").matches,u.webview=u.webView,u.standalone=u.webView,u.desktop=!(u.ios||u.android)||T,u.desktop&&(u.electron=T,u.macos=E,u.windows=x,u.macos&&(u.os="macos"),u.windows&&(u.os="windows")),u.pixelRatio=se.devicePixelRatio||1,u);function $(){var e,t,i,n=this.params,s=this.el;s&&0===s.offsetWidth||(n.breakpoints&&this.setBreakpoint(),e=this.allowSlideNext,t=this.allowSlidePrev,i=this.snapGrid,this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===n.slidesPerView||1<n.slidesPerView)&&this.isEnd&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=t,this.allowSlideNext=e,this.params.watchOverflow&&i!==this.snapGrid&&this.checkOverflow())}var O=!1;function N(){}var I,j={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},H={update:C,translate:k,transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.params,s=this.previousIndex;if(!n.cssMode){n.autoHeight&&this.updateAutoHeight();var a=(a=t)||(s<i?"next":i<s?"prev":"reset");if(this.emit("transitionStart"),e&&i!==s){if("reset"===a)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===a?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.previousIndex,s=this.params;if(this.animating=!1,!s.cssMode){this.setTransition(0);var a=(a=t)||(n<i?"next":i<n?"prev":"reset");if(this.emit("transitionEnd"),e&&i!==n){if("reset"===a)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===a?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:M,loop:P,grabCursor:L,manipulation:D,events:{attachEvents:function(){var e=this.params,t=this.touchEvents,i=this.el,n=this.wrapperEl;this.onTouchStart=function(e){var t,i,n,s,a,r,o,l,d=this.touchEventsData,u=this.params,c=this.touches;this.animating&&u.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),i=z(t.target),"wrapper"===u.touchEventsTarget&&!i.closest(this.wrapperEl).length||(d.isTouchEvent="touchstart"===t.type,!d.isTouchEvent&&"which"in t&&3===t.which||!d.isTouchEvent&&"button"in t&&0<t.button||d.isTouched&&d.isMoved)||(u.noSwiping&&i.closest(u.noSwipingSelector?u.noSwipingSelector:"."+u.noSwipingClass)[0]?this.allowClick=!0:u.swipeHandler&&!i.closest(u.swipeHandler)[0]||(c.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,c.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,n=c.currentX,s=c.currentY,a=u.edgeSwipeDetection||u.iOSEdgeSwipeDetection,r=u.edgeSwipeThreshold||u.iOSEdgeSwipeThreshold,a&&(n<=r||n>=se.screen.width-r)||(ae.extend(d,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),c.startX=n,c.startY=s,d.touchStartTime=ae.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,0<u.threshold&&(d.allowThresholdMove=!1),"touchstart"!==t.type&&(o=!0,i.is(d.formElements)&&(o=!1),m.activeElement&&z(m.activeElement).is(d.formElements)&&m.activeElement!==i[0]&&m.activeElement.blur(),l=o&&this.allowTouchMove&&u.touchStartPreventDefault,(u.touchStartForcePreventDefault||l)&&t.preventDefault()),this.emit("touchStart",t)))))}.bind(this),this.onTouchMove=function(e){var t=this.touchEventsData,i=this.params,n=this.touches,s=this.rtlTranslate,a=e;if(a.originalEvent&&(a=a.originalEvent),t.isTouched){if(!t.isTouchEvent||"touchmove"===a.type){var r="touchmove"===a.type&&a.targetTouches&&(a.targetTouches[0]||a.changedTouches[0]),o="touchmove"===a.type?r.pageX:a.pageX,l="touchmove"===a.type?r.pageY:a.pageY;if(a.preventedByNestedSwiper)return n.startX=o,void(n.startY=l);if(!this.allowTouchMove)return this.allowClick=!1,void(t.isTouched&&(ae.extend(n,{startX:o,startY:l,currentX:o,currentY:l}),t.touchStartTime=ae.now()));if(t.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(this.isVertical()){if(l<n.startY&&this.translate<=this.maxTranslate()||l>n.startY&&this.translate>=this.minTranslate())return t.isTouched=!1,void(t.isMoved=!1)}else if(o<n.startX&&this.translate<=this.maxTranslate()||o>n.startX&&this.translate>=this.minTranslate())return;if(t.isTouchEvent&&m.activeElement&&a.target===m.activeElement&&z(a.target).is(t.formElements))return t.isMoved=!0,void(this.allowClick=!1);if(t.allowTouchCallbacks&&this.emit("touchMove",a),!(a.targetTouches&&1<a.targetTouches.length)){n.currentX=o,n.currentY=l;var d,u=n.currentX-n.startX,c=n.currentY-n.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(c,2))<this.params.threshold))if(void 0===t.isScrolling&&(this.isHorizontal()&&n.currentY===n.startY||this.isVertical()&&n.currentX===n.startX?t.isScrolling=!1:25<=u*u+c*c&&(d=180*Math.atan2(Math.abs(c),Math.abs(u))/Math.PI,t.isScrolling=this.isHorizontal()?d>i.touchAngle:90-d>i.touchAngle)),t.isScrolling&&this.emit("touchMoveOpposite",a),void 0===t.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(t.startMoving=!0)),t.isScrolling)t.isTouched=!1;else if(t.startMoving){this.allowClick=!1,!i.cssMode&&a.cancelable&&a.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&a.stopPropagation(),t.isMoved||(i.loop&&this.loopFix(),t.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),t.allowMomentumBounce=!1,!i.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",a)),this.emit("sliderMove",a),t.isMoved=!0;var h=this.isHorizontal()?u:c;n.diff=h,h*=i.touchRatio,s&&(h=-h),this.swipeDirection=0<h?"prev":"next",t.currentTranslate=h+t.startTranslate;var p=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<h&&t.currentTranslate>this.minTranslate()?(p=!1,i.resistance&&(t.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+t.startTranslate+h,f))):h<0&&t.currentTranslate<this.maxTranslate()&&(p=!1,i.resistance&&(t.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-t.startTranslate-h,f))),p&&(a.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&t.currentTranslate<t.startTranslate&&(t.currentTranslate=t.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&t.currentTranslate>t.startTranslate&&(t.currentTranslate=t.startTranslate),0<i.threshold){if(!(Math.abs(h)>i.threshold||t.allowThresholdMove))return void(t.currentTranslate=t.startTranslate);if(!t.allowThresholdMove)return t.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,t.currentTranslate=t.startTranslate,void(n.diff=this.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}i.followFinger&&!i.cssMode&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),i.freeMode&&(0===t.velocities.length&&t.velocities.push({position:n[this.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:n[this.isHorizontal()?"currentX":"currentY"],time:ae.now()})),this.updateProgress(t.currentTranslate),this.setTranslate(t.currentTranslate))}}}}else t.startMoving&&t.isScrolling&&this.emit("touchMoveOpposite",a)}.bind(this),this.onTouchEnd=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches,a=t.rtlTranslate,r=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var u,c,h,p,f,m=ae.now(),v=m-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),v<300&&m-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=ae.now(),ae.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?a?t.translate:-t.translate:-i.currentTranslate,!n.cssMode)if(n.freeMode){if(u<-t.minTranslate())return void t.slideTo(t.activeIndex);if(u>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){1<i.velocities.length?(c=i.velocities.pop(),h=i.velocities.pop(),p=c.position-h.position,f=c.time-h.time,t.velocity=p/f,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(150<f||300<ae.now()-c.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;a&&(b=-b);var w,x,T,E,C=!1,S=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-S&&(b=t.maxTranslate()-S),w=t.maxTranslate(),C=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>S&&(b=t.minTranslate()+S),w=t.minTranslate(),C=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(n.freeModeSticky){for(var k,M=0;M<l.length;M+=1)if(l[M]>-b){k=M;break}b=-(Math.abs(l[k]-b)<Math.abs(l[k-1]-b)||"next"===t.swipeDirection?l[k]:l[k-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=a?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),n.freeModeSticky&&(g=(T=Math.abs((a?-b:b)-t.translate))<(E=t.slidesSizesGrid[t.activeIndex])?n.speed:T<2*E?1.5*n.speed:2.5*n.speed);else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&C?(t.updateProgress(w),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout(function(){t.setTranslate(w),r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||v>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var P=0,L=t.slidesSizesGrid[0],z=0;z<o.length;z+=z<n.slidesPerGroupSkip?1:n.slidesPerGroup){var D=z<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[z+D]?u>=o[z]&&u<o[z+D]&&(L=o[(P=z)+D]-o[z]):u>=o[z]&&(P=z,L=o[o.length-1]-o[o.length-2])}var A=(u-o[P])/L,$=P<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(v>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=n.longSwipesRatio?t.slideTo(P+$):t.slideTo(P)),"prev"===t.swipeDirection&&(A>1-n.longSwipesRatio?t.slideTo(P+$):t.slideTo(P))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(P+$),"prev"===t.swipeDirection&&t.slideTo(P)):d.target===t.navigation.nextEl?t.slideTo(P+$):t.slideTo(P)}}}.bind(this),e.cssMode&&(this.onScroll=function(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0==i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}.bind(this)),this.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(this);var s,a=!!e.nested;!S.touch&&S.pointerEvents?(i.addEventListener(t.start,this.onTouchStart,!1),m.addEventListener(t.move,this.onTouchMove,a),m.addEventListener(t.end,this.onTouchEnd,!1)):(S.touch&&(s=!("touchstart"!==t.start||!S.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1},i.addEventListener(t.start,this.onTouchStart,s),i.addEventListener(t.move,this.onTouchMove,S.passiveListener?{passive:!1,capture:a}:a),i.addEventListener(t.end,this.onTouchEnd,s),t.cancel&&i.addEventListener(t.cancel,this.onTouchEnd,s),O||(m.addEventListener("touchstart",N),O=!0)),(e.simulateTouch&&!A.ios&&!A.android||e.simulateTouch&&!S.touch&&A.ios)&&(i.addEventListener("mousedown",this.onTouchStart,!1),m.addEventListener("mousemove",this.onTouchMove,a),m.addEventListener("mouseup",this.onTouchEnd,!1))),(e.preventClicks||e.preventClicksPropagation)&&i.addEventListener("click",this.onClick,!0),e.cssMode&&n.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on(A.ios||A.android?"resize orientationchange observerUpdate":"resize observerUpdate",$,!0):this.on("observerUpdate",$,!0)},detachEvents:function(){var e,t=this.params,i=this.touchEvents,n=this.el,s=this.wrapperEl,a=!!t.nested;!S.touch&&S.pointerEvents?(n.removeEventListener(i.start,this.onTouchStart,!1),m.removeEventListener(i.move,this.onTouchMove,a),m.removeEventListener(i.end,this.onTouchEnd,!1)):(S.touch&&(e=!("onTouchStart"!==i.start||!S.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(i.start,this.onTouchStart,e),n.removeEventListener(i.move,this.onTouchMove,a),n.removeEventListener(i.end,this.onTouchEnd,e),i.cancel&&n.removeEventListener(i.cancel,this.onTouchEnd,e)),(t.simulateTouch&&!A.ios&&!A.android||t.simulateTouch&&!S.touch&&A.ios)&&(n.removeEventListener("mousedown",this.onTouchStart,!1),m.removeEventListener("mousemove",this.onTouchMove,a),m.removeEventListener("mouseup",this.onTouchEnd,!1))),(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",this.onClick,!0),t.cssMode&&s.removeEventListener("scroll",this.onScroll),this.off(A.ios||A.android?"resize orientationchange observerUpdate":"resize observerUpdate",$)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides;void 0===i&&(i=0);var n,s,a,r,o,l,d,u=this.params,c=this.$el,h=u.breakpoints;!h||h&&0===Object.keys(h).length||(n=this.getBreakpoint(h))&&this.currentBreakpoint!==n&&((s=n in h?h[n]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=s[e];void 0!==t&&(s[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),a=s||this.originalParams,r=1<u.slidesPerColumn,o=1<a.slidesPerColumn,r&&!o?c.removeClass(u.containerModifierClass+"multirow "+u.containerModifierClass+"multirow-column"):!r&&o&&(c.addClass(u.containerModifierClass+"multirow"),"column"===a.slidesPerColumnFill&&c.addClass(u.containerModifierClass+"multirow-column")),l=a.direction&&a.direction!==u.direction,d=u.loop&&(a.slidesPerView!==u.slidesPerView||l),l&&t&&this.changeDirection(),ae.extend(this.params,a),ae.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=n,d&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-i+this.loopedSlides,0,!1)),this.emit("breakpoint",a))},getBreakpoint:function(e){if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:se.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var n=0;n<i.length;n+=1){var s=i[n],a=s.point;s.value<=se.innerWidth&&(t=a)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=0<this.slides.length&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,n=this.$el,s=[];s.push("initialized"),s.push(i.direction),i.freeMode&&s.push("free-mode"),i.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<i.slidesPerColumn&&(s.push("multirow"),"column"===i.slidesPerColumnFill&&s.push("multirow-column")),A.android&&s.push("android"),A.ios&&s.push("ios"),i.cssMode&&s.push("css-mode"),s.forEach(function(e){t.push(i.containerModifierClass+e)}),n.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,s,a){var r;function o(){a&&a()}!(z(e).parent("picture")[0]||e.complete&&s)&&t?((r=new se.Image).onload=o,r.onerror=o,n&&(r.sizes=n),i&&(r.srcset=i),t&&(r.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},q={},B=function(c){function h(){for(var e,s,t=[],i=arguments.length;i--;)t[i]=arguments[i];s=(s=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(e=t[0],t[1]))||{},s=ae.extend({},s),e&&!s.el&&(s.el=e),c.call(this,s),Object.keys(H).forEach(function(t){Object.keys(H[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=H[t][e])})});var a=this;void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach(function(e){var t=a.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n||null===n)return;if(!(i in s&&"enabled"in n))return;!0===s[i]&&(s[i]={enabled:!0}),"object"!=typeof s[i]||"enabled"in s[i]||(s[i].enabled=!0),s[i]||(s[i]={enabled:!1})}});var n=ae.extend({},j);a.useModulesParams(n),a.params=ae.extend({},n,q,s),a.originalParams=ae.extend({},a.params),a.passedParams=ae.extend({},s);var r,o,l,d=(a.$=z)(a.params.el);if(e=d[0]){if(1<d.length){var u=[];return d.each(function(e,t){var i=ae.extend({},s,{el:t});u.push(new h(i))}),u}return e.swiper=a,d.data("swiper",a),e&&e.shadowRoot&&e.shadowRoot.querySelector?(r=z(e.shadowRoot.querySelector("."+a.params.wrapperClass))).children=function(e){return d.children(e)}:r=d.children("."+a.params.wrapperClass),ae.extend(a,{$el:d,el:e,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:z(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===d.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===d.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(o=["touchstart","touchmove","touchend","touchcancel"],l=S.pointerEvents?["pointerdown","pointermove","pointerup"]:["mousedown","mousemove","mouseup"],a.touchEventsTouch={start:o[0],move:o[1],end:o[2],cancel:o[3]},a.touchEventsDesktop={start:l[0],move:l[1],end:l[2]},S.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:ae.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.params.init&&a.init(),a}}c&&(h.__proto__=c),h.prototype=Object.create(c&&c.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(h.prototype.constructor=h).prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,n=this.size,s=this.activeIndex,a=1;if(e.centeredSlides){for(var r,o=t[s].swiperSlideSize,l=s+1;l<t.length;l+=1)t[l]&&!r&&(a+=1,(o+=t[l].swiperSlideSize)>n&&(r=!0));for(var d=s-1;0<=d;--d)t[d]&&!r&&(a+=1,(o+=t[d].swiperSlideSize)>n&&(r=!0))}else for(var u=s+1;u<t.length;u+=1)i[u]-i[s]<n&&(a+=1);return a},h.prototype.update=function(){var e,t,i=this;function n(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}i&&!i.destroyed&&(e=i.snapGrid,(t=i.params).breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(n(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||n(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update"))},h.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this.params.direction;return(i=i||("horizontal"===t?"vertical":"horizontal"))===t||"horizontal"!==i&&"vertical"!==i||(this.$el.removeClass(""+this.params.containerModifierClass+t).addClass(""+this.params.containerModifierClass+i),this.params.direction=i,this.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),this.emit("changeDirection"),e&&this.update()),this},h.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},h.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,s=i.$el,a=i.$wrapperEl,r=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),a.removeAttr("style"),r&&r.length&&r.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),ae.deleteProps(i)),i.destroyed=!0),null},h.extendDefaults=function(e){ae.extend(q,e)},e.extendedDefaults.get=function(){return q},e.defaults.get=function(){return j},e.Class.get=function(){return c},e.$.get=function(){return z},Object.defineProperties(h,e),h}(i),R={name:"device",proto:{device:A},static:{device:A}},F={name:"support",proto:{support:S},static:{support:S}},G={isEdge:!!se.navigator.userAgent.match(/Edge/g),isSafari:0<=(I=se.navigator.userAgent.toLowerCase()).indexOf("safari")&&I.indexOf("chrome")<0&&I.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(se.navigator.userAgent)},W={name:"browser",proto:{browser:G},static:{browser:G}},X={name:"resize",create:function(){var e=this;ae.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){se.addEventListener("resize",this.resize.resizeHandler),se.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){se.removeEventListener("resize",this.resize.resizeHandler),se.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},V={func:se.MutationObserver||se.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=new V.func(function(e){var t;1!==e.length?(t=function(){i.emit("observerUpdate",e[0])},se.requestAnimationFrame?se.requestAnimationFrame(t):se.setTimeout(t,0)):i.emit("observerUpdate",e[0])});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init:function(){if(S.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},Y={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){ae.extend(this,{observer:{init:V.init.bind(this),attach:V.attach.bind(this),destroy:V.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},_={update:function(e){var t=this,i=t.params,n=i.slidesPerView,s=i.slidesPerGroup,a=i.centeredSlides,r=t.params.virtual,o=r.addSlidesBefore,l=r.addSlidesAfter,d=t.virtual,u=d.from,c=d.to,h=d.slides,p=d.slidesGrid,f=d.renderSlide,m=d.offset;t.updateActiveIndex();var v,g=t.activeIndex||0,y=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",b=a?(v=Math.floor(n/2)+s+o,Math.floor(n/2)+s+l):(v=n+(s-1)+o,s+l),w=Math.max((g||0)-b,0),x=Math.min((g||0)+v,h.length-1),T=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function E(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(ae.extend(t.virtual,{from:w,to:x,offset:T,slidesGrid:t.slidesGrid}),u===w&&c===x&&!e)return t.slidesGrid!==p&&T!==m&&t.slides.css(y,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:w,to:x,slides:function(){for(var e=[],t=w;t<=x;t+=1)e.push(h[t]);return e}()}),void E();var C=[],S=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=u;k<=c;k+=1)(k<w||x<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var M=0;M<h.length;M+=1)w<=M&&M<=x&&(void 0===c||e?S.push(M):(c<M&&S.push(M),M<u&&C.push(M)));S.forEach(function(e){t.$wrapperEl.append(f(h[e],e))}),C.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(h[e],e))}),t.$wrapperEl.children(".swiper-slide").css(y,T+"px"),E()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var n=i.renderSlide?z(i.renderSlide.call(this,e,t)):z('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return n.attr("data-swiper-slide-index")||n.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=n),n},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var n,s,t=this.activeIndex,i=t+1,a=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&this.virtual.slides.unshift(e[r]);i=t+e.length,a=e.length}else this.virtual.slides.unshift(e);this.params.virtual.cache&&(n=this.virtual.cache,s={},Object.keys(n).forEach(function(e){var t=n[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),s[parseInt(e,10)+a]=t}),this.virtual.cache=s),this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&--t,t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&--t,t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},U={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){ae.extend(this,{virtual:{update:_.update.bind(this),appendSlide:_.appendSlide.bind(this),prependSlide:_.prependSlide.bind(this),removeSlide:_.removeSlide.bind(this),removeAllSlides:_.removeAllSlides.bind(this),renderSlide:_.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e;this.params.virtual.enabled&&(this.classNames.push(this.params.containerModifierClass+"virtual"),e={watchSlidesProgress:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e),this.params.initialSlide||this.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},K={handle:function(e){var t=this.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var n=i.keyCode||i.charCode;if(!this.allowSlideNext&&(this.isHorizontal()&&39===n||this.isVertical()&&40===n||34===n))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&37===n||this.isVertical()&&38===n||33===n))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||m.activeElement&&m.activeElement.nodeName&&("input"===m.activeElement.nodeName.toLowerCase()||"textarea"===m.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(33===n||34===n||37===n||39===n||38===n||40===n)){var s=!1;if(0<this.$el.parents("."+this.params.slideClass).length&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var a=se.innerWidth,r=se.innerHeight,o=this.$el.offset();t&&(o.left-=this.$el[0].scrollLeft);for(var l=[[o.left,o.top],[o.left+this.width,o.top],[o.left,o.top+this.height],[o.left+this.width,o.top+this.height]],d=0;d<l.length;d+=1){var u=l[d];0<=u[0]&&u[0]<=a&&0<=u[1]&&u[1]<=r&&(s=!0)}if(!s)return}this.isHorizontal()?(33!==n&&34!==n&&37!==n&&39!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==n&&39!==n||t)&&(33!==n&&37!==n||!t)||this.slideNext(),(33!==n&&37!==n||t)&&(34!==n&&39!==n||!t)||this.slidePrev()):(33!==n&&34!==n&&38!==n&&40!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==n&&40!==n||this.slideNext(),33!==n&&38!==n||this.slidePrev()),this.emit("keyPress",n)}},enable:function(){this.keyboard.enabled||(z(m).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(z(m).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},Q={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){ae.extend(this,{keyboard:{enabled:!1,enable:K.enable.bind(this),disable:K.disable.bind(this),handle:K.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},J={lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<se.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((t="onwheel"in m)||((e=m.createElement("div")).setAttribute("onwheel","return;"),t="function"==typeof e.onwheel),!t&&m.implementation&&m.implementation.hasFeature&&!0!==m.implementation.hasFeature("","")&&(t=m.implementation.hasFeature("Events.wheel","3.0")),t?"wheel":"mousewheel");var e,t},normalize:function(e){var t=0,i=0,n=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=s,s=0),(n||s)&&e.deltaMode&&(1===e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!i&&(i=s<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var s=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(s=z(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!s[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,r=i.rtlTranslate?-1:1,o=J.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===a)return!0;if(n.invert&&(a=-a),i.params.freeMode){var l={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a)},d=i.mousewheel.lastEventBeforeSnap,u=d&&l.time<d.time+500&&l.delta<=d.delta&&l.direction===d.direction;if(!u){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var c,h,p,f,m=i.getTranslate()+a*n.sensitivity,v=i.isBeginning,g=i.isEnd;if(m>=i.minTranslate()&&(m=i.minTranslate()),m<=i.maxTranslate()&&(m=i.maxTranslate()),i.setTransition(0),i.setTranslate(m),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!v&&i.isBeginning||!g&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0,15<=(c=i.mousewheel.recentWheelEvents).length&&c.shift(),h=c.length?c[c.length-1]:void 0,p=c[0],c.push(l),h&&(l.delta>h.delta||l.direction!==h.direction)?c.splice(0):15<=c.length&&l.time-p.time<500&&1<=p.delta-l.delta&&l.delta<=6&&(f=0<a?.8:.2,i.mousewheel.lastEventBeforeSnap=l,c.splice(0),i.mousewheel.timeout=ae.nextTick(function(){i.slideToClosest(i.params.speed,!0,void 0,f)},0)),i.mousewheel.timeout||(i.mousewheel.timeout=ae.nextTick(function(){i.mousewheel.lastEventBeforeSnap=l,c.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))),u||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),m===i.minTranslate()||m===i.maxTranslate())return!0}}else{var y={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a),raw:e},b=i.mousewheel.recentWheelEvents;2<=b.length&&b.shift();var w=b.length?b[b.length-1]:void 0;if(b.push(y),(!w||y.direction!==w.direction||y.delta>w.delta||y.time>w.time+150)&&i.mousewheel.animateSlider(y),i.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){return 6<=e.delta&&ae.now()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new se.Date).getTime(),!1)},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=J.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=z(this.params.mousewheel.eventsTarged)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0},disable:function(){var e=J.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=z(this.params.mousewheel.eventsTarged)),t.off(e,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},Z={update:function(){var e,t,i,n=this.params.navigation;this.params.loop||(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?i.addClass(n.disabledClass):i.removeClass(n.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)),t&&0<t.length&&(this.isEnd?t.addClass(n.disabledClass):t.removeClass(n.disabledClass),t[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=z(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=z(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",this.navigation.onNextClick),t&&0<t.length&&t.on("click",this.navigation.onPrevClick),ae.extend(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},ee={update:function(){var e=this.rtl,s=this.params.pagination;if(s.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var a,t,i,n,r,o=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,l=this.pagination.$el,d=this.params.loop?Math.ceil((o-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((a=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>o-1-2*this.loopedSlides&&(a-=o-2*this.loopedSlides),d-1<a&&(a-=d),a<0&&"bullets"!==this.params.paginationType&&(a=d+a)):a=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===s.type&&this.pagination.bullets&&0<this.pagination.bullets.length){var u,c,h,p,f,m,v=this.pagination.bullets;if(s.dynamicBullets&&(this.pagination.bulletSize=v.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),l.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=a-this.previousIndex,this.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),u=a-this.pagination.dynamicBulletIndex,h=((c=u+(Math.min(v.length,s.dynamicMainBullets)-1))+u)/2),v.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<l.length)v.each(function(e,t){var i=z(t),n=i.index();n===a&&i.addClass(s.bulletActiveClass),s.dynamicBullets&&(u<=n&&n<=c&&i.addClass(s.bulletActiveClass+"-main"),n===u&&i.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),n===c&&i.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else{var g=v.eq(a),y=g.index();if(g.addClass(s.bulletActiveClass),s.dynamicBullets){for(var b=v.eq(u),w=v.eq(c),x=u;x<=c;x+=1)v.eq(x).addClass(s.bulletActiveClass+"-main");if(this.params.loop)if(y>=v.length-s.dynamicMainBullets){for(var T=s.dynamicMainBullets;0<=T;--T)v.eq(v.length-T).addClass(s.bulletActiveClass+"-main");v.eq(v.length-s.dynamicMainBullets-1).addClass(s.bulletActiveClass+"-prev")}else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next");else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}}s.dynamicBullets&&(p=Math.min(v.length,s.dynamicMainBullets+4),f=(this.pagination.bulletSize*p-this.pagination.bulletSize)/2-h*this.pagination.bulletSize,m=e?"right":"left",v.css(this.isHorizontal()?m:"top",f+"px"))}"fraction"===s.type&&(l.find("."+s.currentClass).text(s.formatFractionCurrent(a+1)),l.find("."+s.totalClass).text(s.formatFractionTotal(d))),"progressbar"===s.type&&(t=s.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical",i=(a+1)/d,r=n=1,"horizontal"==t?n=i:r=i,l.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+n+") scaleY("+r+")").transition(this.params.speed)),"custom"===s.type&&s.renderCustom?(l.html(s.renderCustom(this,a+1,d)),this.emit("paginationRender",this,l[0])):this.emit("paginationUpdate",this,l[0]),l[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,n="";if("bullets"===e.type){for(var s=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,a=0;a<s;a+=1)e.renderBullet?n+=e.renderBullet.call(this,a,e.bulletClass):n+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(n),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(n)),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(n)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e,i=this,t=i.params.pagination;!t.el||0!==(e=z(t.el)).length&&(i.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1===i.$el.find(t.el).length&&(e=i.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=z(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),ae.extend(i.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this.params.pagination;t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length&&((e=this.pagination.$el).removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),this.pagination.bullets&&this.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click","."+t.bulletClass))}},te={setTranslate:function(){var e,t,i,n,s,a,r,o,l,d;this.params.scrollbar.el&&this.scrollbar.el&&(e=this.scrollbar,t=this.rtlTranslate,i=this.progress,n=e.dragSize,s=e.trackSize,a=e.$dragEl,r=e.$el,o=this.params.scrollbar,d=(s-(l=n))*i,t?0<(d=-d)?(l=n-d,d=0):s<-d+n&&(l=s+d):d<0?(l=n+d,d=0):s<d+n&&(l=s-d),this.isHorizontal()?(a.transform("translate3d("+d+"px, 0, 0)"),a[0].style.width=l+"px"):(a.transform("translate3d(0px, "+d+"px, 0)"),a[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),r[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){r[0].style.opacity=0,r.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&this.scrollbar.el&&(t=(e=this.scrollbar).$dragEl,i=e.$el,t[0].style.width="",t[0].style.height="",n=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,a=(s=this.size/this.virtualSize)*(n/this.size),r="auto"===this.params.scrollbar.dragSize?n*s:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=r+"px":t[0].style.height=r+"px",i[0].style.display=1<=s?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),ae.extend(e,{trackSize:n,divider:s,moveDivider:a,dragSize:r}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t=this.scrollbar,i=this.rtlTranslate,n=t.$el,s=t.dragSize,a=t.trackSize,r=t.dragStartPos,o=(t.getPointerPosition(e)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:s/2))/(a-s);o=Math.max(Math.min(o,1),0),i&&(o=1-o);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el,a=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===a[0]||e.target===a?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),n.transition(100),a.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),s.transition(0),t.hide&&s.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,n=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),n.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=ae.nextTick(function(){s.css("opacity",0),s.transition(400)},1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!S.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},r=!(!S.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},S.touch?(s.addEventListener(t.start,this.scrollbar.onDragStart,a),s.addEventListener(t.move,this.scrollbar.onDragMove,a),s.addEventListener(t.end,this.scrollbar.onDragEnd,r)):(s.addEventListener(i.start,this.scrollbar.onDragStart,a),m.addEventListener(i.move,this.scrollbar.onDragMove,a),m.addEventListener(i.end,this.scrollbar.onDragEnd,r)))},disableDraggable:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!S.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},r=!(!S.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},S.touch?(s.removeEventListener(t.start,this.scrollbar.onDragStart,a),s.removeEventListener(t.move,this.scrollbar.onDragMove,a),s.removeEventListener(t.end,this.scrollbar.onDragEnd,r)):(s.removeEventListener(i.start,this.scrollbar.onDragStart,a),m.removeEventListener(i.move,this.scrollbar.onDragMove,a),m.removeEventListener(i.end,this.scrollbar.onDragEnd,r)))},init:function(){var e,t,i,n,s;this.params.scrollbar.el&&(e=this.scrollbar,t=this.$el,n=z((i=this.params.scrollbar).el),this.params.uniqueNavElements&&"string"==typeof i.el&&1<n.length&&1===t.find(i.el).length&&(n=t.find(i.el)),0===(s=n.find("."+this.params.scrollbar.dragClass)).length&&(s=z('<div class="'+this.params.scrollbar.dragClass+'"></div>'),n.append(s)),ae.extend(e,{$el:n,el:n[0],$dragEl:s,dragEl:s[0]}),i.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},ie={setTransform:function(e,t){var i,n,s=this.rtl,a=z(e),r=s?-1:1,o=a.attr("data-swiper-parallax")||"0",l=a.attr("data-swiper-parallax-x"),d=a.attr("data-swiper-parallax-y"),u=a.attr("data-swiper-parallax-scale"),c=a.attr("data-swiper-parallax-opacity");l||d?(l=l||"0",d=d||"0"):this.isHorizontal()?(l=o,d="0"):(d=o,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*r+"%":l*t*r+"px",d=0<=d.indexOf("%")?parseInt(d,10)*t+"%":d*t+"px",null!=c&&(i=c-(c-1)*(1-Math.abs(t)),a[0].style.opacity=i),null==u?a.transform("translate3d("+l+", "+d+", 0px)"):(n=u-(u-1)*(1-Math.abs(t)),a.transform("translate3d("+l+", "+d+", 0px) scale("+n+")"))},setTranslate:function(){var n=this,e=n.$el,t=n.slides,s=n.progress,a=n.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,s)}),t.each(function(e,t){var i=t.progress;1<n.params.slidesPerGroup&&"auto"!==n.params.slidesPerView&&(i+=Math.ceil(e/2)-s*(a.length-1)),i=Math.min(Math.max(i,-1),1),z(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,i)})})},setTransition:function(s){void 0===s&&(s=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var i=z(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||s;0===s&&(n=0),i.transition(n)})}},ne={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(s-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!S.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,n.scaleStart=ne.getDistanceBetweenTouches(e)}n.$slideEl&&n.$slideEl.length||(n.$slideEl=z(e.target).closest("."+this.params.slideClass),0===n.$slideEl.length&&(n.$slideEl=this.slides.eq(this.activeIndex)),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+t.containerClass),n.maxRatio=n.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==n.$imageWrapEl.length)?(n.$imageEl&&n.$imageEl.transition(0),this.zoom.isScaling=!0):n.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!S.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=ne.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=S.gestures?e.scale*i.currentScale:n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!S.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!A.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,n=t.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(A.android&&e.cancelable&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,n=t.image,s=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,n.isTouched&&i.$slideEl)){n.isMoved||(n.width=i.$imageEl[0].offsetWidth,n.height=i.$imageEl[0].offsetHeight,n.startX=ae.getTranslate(i.$imageWrapEl[0],"x")||0,n.startY=ae.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(n.startX=-n.startX,n.startY=-n.startY));var a=n.width*t.scale,r=n.height*t.scale;if(!(a<i.slideWidth&&r<i.slideHeight)){if(n.minX=Math.min(i.slideWidth/2-a/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-r/2,0),n.maxY=-n.minY,n.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!n.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(n.minX)===Math.floor(n.startX)&&n.touchesCurrent.x<n.touchesStart.x||Math.floor(n.maxX)===Math.floor(n.startX)&&n.touchesCurrent.x>n.touchesStart.x))return void(n.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(n.minY)===Math.floor(n.startY)&&n.touchesCurrent.y<n.touchesStart.y||Math.floor(n.maxY)===Math.floor(n.startY)&&n.touchesCurrent.y>n.touchesStart.y))return void(n.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),n.isMoved=!0,n.currentX=n.touchesCurrent.x-n.touchesStart.x+n.startX,n.currentY=n.touchesCurrent.y-n.touchesStart.y+n.startY,n.currentX<n.minX&&(n.currentX=n.minX+1-Math.pow(n.minX-n.currentX+1,.8)),n.currentX>n.maxX&&(n.currentX=n.maxX-1+Math.pow(n.currentX-n.maxX+1,.8)),n.currentY<n.minY&&(n.currentY=n.minY+1-Math.pow(n.minY-n.currentY+1,.8)),n.currentY>n.maxY&&(n.currentY=n.maxY-1+Math.pow(n.currentY-n.maxY+1,.8)),s.prevPositionX||(s.prevPositionX=n.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=n.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(n.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(n.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(n.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(n.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=n.touchesCurrent.x,s.prevPositionY=n.touchesCurrent.y,s.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var s=300,a=300,r=n.x*s,o=i.currentX+r,l=n.y*a,d=i.currentY+l;0!==n.x&&(s=Math.abs((o-i.currentX)/n.x)),0!==n.y&&(a=Math.abs((d-i.currentY)/n.y));var u=Math.max(s,a);i.currentX=o,i.currentY=d;var c=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(u).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,s,a,r,o,l,d,u,c,h,p,f,m,v,g=this.zoom,y=this.params.zoom,b=g.gesture,w=g.image;b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length&&(b.$slideEl.addClass(""+y.zoomedSlideClass),i=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),g.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,g.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(m=b.$slideEl[0].offsetWidth,v=b.$slideEl[0].offsetHeight,n=b.$slideEl.offset().left+m/2-t,s=b.$slideEl.offset().top+v/2-i,o=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,d=o*g.scale,u=l*g.scale,p=-(c=Math.min(m/2-d/2,0)),f=-(h=Math.min(v/2-u/2,0)),(a=n*g.scale)<c&&(a=c),p<a&&(a=p),(r=s*g.scale)<h&&(r=h),f<r&&(r=f)):r=a=0,b.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+r+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t,i,n=this.zoom;n.enabled||(n.enabled=!0,e=!("touchstart"!==this.touchEvents.start||!S.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!S.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,S.gestures?(this.$wrapperEl.on("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.on("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.on("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.on(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.on(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))},disable:function(){var e,t,i,n=this.zoom;n.enabled&&(this.zoom.enabled=!1,e=!("touchstart"!==this.touchEvents.start||!S.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!S.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,S.gestures?(this.$wrapperEl.off("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.off("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.off("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.off(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.off(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))}},re={loadInSlide:function(e,d){void 0===d&&(d=!0);var u,t,c=this,h=c.params.lazy;void 0!==e&&0!==c.slides.length&&(t=(u=c.virtual&&c.params.virtual.enabled?c.$wrapperEl.children("."+c.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):c.slides.eq(e)).find("."+h.elementClass+":not(."+h.loadedClass+"):not(."+h.loadingClass+")"),!u.hasClass(h.elementClass)||u.hasClass(h.loadedClass)||u.hasClass(h.loadingClass)||(t=t.add(u[0])),0!==t.length&&t.each(function(e,t){var n=z(t);n.addClass(h.loadingClass);var s=n.attr("data-background"),a=n.attr("data-src"),r=n.attr("data-srcset"),o=n.attr("data-sizes"),l=n.parent("picture");c.loadImage(n[0],a||s,r,o,!1,function(){var e,t,i;null==c||!c||c&&!c.params||c.destroyed||(s?(n.css("background-image",'url("'+s+'")'),n.removeAttr("data-background")):(r&&(n.attr("srcset",r),n.removeAttr("data-srcset")),o&&(n.attr("sizes",o),n.removeAttr("data-sizes")),l.length&&l.children("source").each(function(e,t){var i=z(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))}),a&&(n.attr("src",a),n.removeAttr("data-src"))),n.addClass(h.loadedClass).removeClass(h.loadingClass),u.find("."+h.preloaderClass).remove(),c.params.loop&&d&&(e=u.attr("data-swiper-slide-index"),u.hasClass(c.params.slideDuplicateClass)?(t=c.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+c.params.slideDuplicateClass+")"),c.lazy.loadInSlide(t.index(),!1)):(i=c.$wrapperEl.children("."+c.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),c.lazy.loadInSlide(i.index(),!1))),c.emit("lazyImageReady",u[0],n[0]),c.params.autoHeight&&c.updateAutoHeight())}),c.emit("lazyImageLoad",u[0],n[0])}))},load:function(){var n=this,t=n.$wrapperEl,i=n.params,s=n.slides,e=n.activeIndex,a=n.virtual&&i.virtual.enabled,r=i.lazy,o=i.slidesPerView;function l(e){if(a){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return a?z(e).attr("data-swiper-slide-index"):z(e).index()}if("auto"===o&&(o=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=a?z(t).attr("data-swiper-slide-index"):z(t).index();n.lazy.loadInSlide(i)});else if(1<o)for(var u=e;u<e+o;u+=1)l(u)&&n.lazy.loadInSlide(u);else n.lazy.loadInSlide(e);if(r.loadPrevNext)if(1<o||r.loadPrevNextAmount&&1<r.loadPrevNextAmount){for(var c=r.loadPrevNextAmount,h=o,p=Math.min(e+h+Math.max(c,h),s.length),f=Math.max(e-Math.max(h,c),0),m=e+o;m<p;m+=1)l(m)&&n.lazy.loadInSlide(m);for(var v=f;v<e;v+=1)l(v)&&n.lazy.loadInSlide(v)}else{var g=t.children("."+i.slideNextClass);0<g.length&&n.lazy.loadInSlide(d(g));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(d(y))}}},oe={LinearSpline:function(e,t){var i,n,s,a,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=function(e,t){for(n=-1,i=e.length;1<i-n;)e[s=i+n>>1]<=t?n=s:i=s;return i}(this.x,e),a=r-1,(e-this.x[a])*(this.y[r]-this.y[a])/(this.x[r]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new oe.LinearSpline(this.slidesGrid,e.slidesGrid):new oe.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,s=this,a=s.controller.control;function r(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),n=-s.controller.spline.interpolate(-t)),n&&"container"!==s.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),n=(t-s.minTranslate())*i+e.minTranslate()),s.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var o=0;o<a.length;o+=1)a[o]!==t&&a[o]instanceof B&&r(a[o]);else a instanceof B&&t!==a&&r(a)},setTransition:function(t,e){var i,n=this,s=n.controller.control;function a(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&ae.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof B&&a(s[i]);else s instanceof B&&e!==s&&a(s)}},le={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,i=this.params.a11y;13===e.keyCode&&(t=z(e.target),this.navigation&&this.navigation.$nextEl&&t.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(i.lastSlideMessage):this.a11y.notify(i.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&t.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(i.firstSlideMessage):this.a11y.notify(i.prevSlideMessage)),this.pagination&&t.is("."+this.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,i;!this.params.loop&&this.navigation&&(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?(this.a11y.disableEl(i),this.a11y.makeElNotFocusable(i)):(this.a11y.enableEl(i),this.a11y.makeElFocusable(i))),t&&0<t.length&&(this.isEnd?(this.a11y.disableEl(t),this.a11y.makeElNotFocusable(t)):(this.a11y.enableEl(t),this.a11y.makeElFocusable(t))))},updatePagination:function(){var n=this,s=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e,t){var i=z(t);n.a11y.makeElFocusable(i),n.a11y.addElRole(i,"button"),n.a11y.addElLabel(i,s.paginationBulletMessage.replace(/\{\{index\}\}/,i.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&0<this.a11y.liveRegion.length&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},de={init:function(){if(this.params.history){if(!se.history||!se.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=de.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||se.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||se.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=de.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=se.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){var i,n,s;this.history.initialized&&this.params.history.enabled&&(i=this.slides.eq(t),n=de.slugify(i.attr("data-history")),se.location.pathname.includes(e)||(n=e+"/"+n),(s=se.history.state)&&s.value===n||(this.params.history.replaceState?se.history.replaceState({value:n},null,n):se.history.pushState({value:n},null,n)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var n=0,s=this.slides.length;n<s;n+=1){var a,r=this.slides.eq(n);de.slugify(r.attr("data-history"))!==t||r.hasClass(this.params.slideDuplicateClass)||(a=r.index(),this.slideTo(a,e,i))}else this.slideTo(0,e,i)}},ue={onHashCange:function(){this.emit("hashChange");var e=m.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var t=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===t)return;this.slideTo(t)}},setHash:function(){var e,t;this.hashNavigation.initialized&&this.params.hashNavigation.enabled&&(this.params.hashNavigation.replaceState&&se.history&&se.history.replaceState?se.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""):(t=(e=this.slides.eq(this.activeIndex)).attr("data-hash")||e.attr("data-history"),m.location.hash=t||""),this.emit("hashSet"))},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var e=m.location.hash.replace("#","");if(e)for(var t=0,i=this.slides.length;t<i;t+=1){var n,s=this.slides.eq(t);(s.attr("data-hash")||s.attr("data-history"))!==e||s.hasClass(this.params.slideDuplicateClass)||(n=s.index(),this.slideTo(n,0,this.params.runCallbacksOnInit,!0))}this.params.hashNavigation.watchState&&z(se).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&z(se).off("hashchange",this.hashNavigation.onHashCange)}},ce={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=ae.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))}},he={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),n=-i[0].swiperSlideOffset;this.params.virtualTranslate||(n-=this.translate);var s=0;this.isHorizontal()||(s=n,n=0);var a=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:a}).transform("translate3d("+n+"px, "+s+"px, 0px)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.$wrapperEl;t.transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},pe={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,n=this.slides,s=this.width,a=this.height,r=this.rtlTranslate,o=this.size,l=this.params.cubeEffect,d=this.isHorizontal(),u=this.virtual&&this.params.virtual.enabled,c=0;l.shadow&&(d?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=z('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:s+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=z('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var h,p,f,m,v,g=0;g<n.length;g+=1){var y=n.eq(g),b=g;u&&(b=parseInt(y.attr("data-swiper-slide-index"),10));var w=90*b,x=Math.floor(w/360);r&&(w=-w,x=Math.floor(-w/360));var T=Math.max(Math.min(y[0].progress,1),-1),E=0,C=0,S=0;b%4==0?(E=4*-x*o,S=0):(b-1)%4==0?(E=0,S=4*-x*o):(b-2)%4==0?(E=o+4*x*o,S=o):(b-3)%4==0&&(E=-o,S=3*o+4*o*x),r&&(E=-E),d||(C=E,E=0);var k,M,P="rotateX("+(d?0:-w)+"deg) rotateY("+(d?w:0)+"deg) translate3d("+E+"px, "+C+"px, "+S+"px)";T<=1&&-1<T&&(c=r?90*-b-90*T:90*b+90*T),y.transform(P),l.slideShadows&&(k=d?y.find(".swiper-slide-shadow-left"):y.find(".swiper-slide-shadow-top"),M=d?y.find(".swiper-slide-shadow-right"):y.find(".swiper-slide-shadow-bottom"),0===k.length&&(k=z('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),y.append(k)),0===M.length&&(M=z('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),y.append(M)),k.length&&(k[0].style.opacity=Math.max(-T,0)),M.length&&(M[0].style.opacity=Math.max(T,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+o/2+"px","-moz-transform-origin":"50% 50% -"+o/2+"px","-ms-transform-origin":"50% 50% -"+o/2+"px","transform-origin":"50% 50% -"+o/2+"px"}),l.shadow&&(d?e.transform("translate3d(0px, "+(s/2+l.shadowOffset)+"px, "+-s/2+"px) rotateX(90deg) rotateZ(0deg) scale("+l.shadowScale+")"):(h=Math.abs(c)-90*Math.floor(Math.abs(c)/90),p=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),f=l.shadowScale,m=l.shadowScale/p,v=l.shadowOffset,e.transform("scale3d("+f+", 1, "+m+") translate3d(0px, "+(a/2+v)+"px, "+-a/2/m+"px) rotateX(-90deg)")));var L=G.isSafari||G.isUiWebView?-o/2:0;i.transform("translate3d(0px,0,"+L+"px) rotateX("+(this.isHorizontal()?0:c)+"deg) rotateY("+(this.isHorizontal()?-c:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},fe={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var n=e.eq(i),s=n[0].progress;this.params.flipEffect.limitRotation&&(s=Math.max(Math.min(n[0].progress,1),-1));var a,r,o=-180*s,l=0,d=-n[0].swiperSlideOffset,u=0;this.isHorizontal()?t&&(o=-o):(u=d,l=-o,o=d=0),n[0].style.zIndex=-Math.abs(Math.round(s))+e.length,this.params.flipEffect.slideShadows&&(a=this.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),r=this.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom"),0===a.length&&(a=z('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),n.append(a)),0===r.length&&(r=z('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),n.append(r)),a.length&&(a[0].style.opacity=Math.max(-s,0)),r.length&&(r[0].style.opacity=Math.max(s,0))),n.transform("translate3d("+d+"px, "+u+"px, 0px) rotateX("+l+"deg) rotateY("+o+"deg)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.activeIndex,a=n.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.eq(s).transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}}))}},me={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,n=this.$wrapperEl,s=this.slidesSizesGrid,a=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,d=r?a.rotate:-a.rotate,u=a.depth,c=0,h=i.length;c<h;c+=1){var p=i.eq(c),f=s[c],m=(l-p[0].swiperSlideOffset-f/2)/f*a.modifier,v=r?d*m:0,g=r?0:d*m,y=-u*Math.abs(m),b=a.stretch;"string"==typeof b&&-1!==b.indexOf("%")&&(b=parseFloat(a.stretch)/100*f);var w=r?0:b*m,x=r?b*m:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(y)<.001&&(y=0),Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0);var T,E,C="translate3d("+x+"px,"+w+"px,"+y+"px)  rotateX("+g+"deg) rotateY("+v+"deg)";p.transform(C),p[0].style.zIndex=1-Math.abs(Math.round(m)),a.slideShadows&&(T=r?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),E=r?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom"),0===T.length&&(T=z('<div class="swiper-slide-shadow-'+(r?"left":"top")+'"></div>'),p.append(T)),0===E.length&&(E=z('<div class="swiper-slide-shadow-'+(r?"right":"bottom")+'"></div>'),p.append(E)),T.length&&(T[0].style.opacity=0<m?m:0),E.length&&(E[0].style.opacity=0<-m?-m:0))}(S.pointerEvents||S.prefixedPointerEvents)&&(n[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},ve={init:function(){var e=this.params.thumbs,t=this.constructor;e.swiper instanceof t?(this.thumbs.swiper=e.swiper,ae.extend(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ae.extend(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):ae.isObject(e.swiper)&&(this.thumbs.swiper=new t(ae.extend({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick)},onThumbClick:function(){var e,t,i,n,s,a,r=this.thumbs.swiper;r&&(e=r.clickedIndex,(t=r.clickedSlide)&&z(t).hasClass(this.params.thumbs.slideThumbActiveClass)||null==e||(a=r.params.loop?parseInt(z(r.clickedSlide).attr("data-swiper-slide-index"),10):e,this.params.loop&&(i=this.activeIndex,this.slides.eq(i).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,i=this.activeIndex),n=this.slides.eq(i).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),s=this.slides.eq(i).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),a=void 0===n||void 0!==s&&s-i<i-n?s:n),this.slideTo(a)))},update:function(e){var t=this.thumbs.swiper;if(t){var i,n,s,a,r,o="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,l=this.params.thumbs.autoScrollOffset,d=l&&!t.params.loop;this.realIndex===t.realIndex&&!d||(i=t.activeIndex,r=t.params.loop?(t.slides.eq(i).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,i=t.activeIndex),n=t.slides.eq(i).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),s=t.slides.eq(i).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),a=void 0===n?s:void 0===s?n:s-i==i-n?i:s-i<i-n?s:n,this.activeIndex>this.previousIndex?"next":"prev"):(a=this.realIndex)>this.previousIndex?"next":"prev",d&&(a+="next"===r?l:-1*l),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(a)<0&&(t.params.centeredSlides?a=i<a?a-Math.floor(o/2)+1:a+Math.floor(o/2)-1:i<a&&(a=a-o+1),t.slideTo(a,e?0:void 0)));var u=1,c=this.params.thumbs.slideThumbActiveClass;if(1<this.params.slidesPerView&&!this.params.centeredSlides&&(u=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),t.slides.removeClass(c),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var h=0;h<u;h+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+h)+'"]').addClass(c);else for(var p=0;p<u;p+=1)t.slides.eq(this.realIndex+p).addClass(c)}}},ge=[R,F,W,X,Y,U,Q,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){ae.extend(this,{mousewheel:{enabled:!1,enable:J.enable.bind(this),disable:J.disable.bind(this),handle:J.handle.bind(this),handleMouseEnter:J.handleMouseEnter.bind(this),handleMouseLeave:J.handleMouseLeave.bind(this),animateSlider:J.animateSlider.bind(this),releaseScroll:J.releaseScroll.bind(this),lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init:function(){!this.params.mousewheel.enabled&&this.params.cssMode&&this.mousewheel.disable(),this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.params.cssMode&&this.mousewheel.enable(),this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){ae.extend(this,{navigation:{init:Z.init.bind(this),update:Z.update.bind(this),destroy:Z.destroy.bind(this),onNextClick:Z.onNextClick.bind(this),onPrevClick:Z.onPrevClick.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this.navigation,n=i.$nextEl,s=i.$prevEl;!this.params.navigation.hideOnClick||z(e.target).is(s)||z(e.target).is(n)||(n?t=n.hasClass(this.params.navigation.hiddenClass):s&&(t=s.hasClass(this.params.navigation.hiddenClass)),!0===t?this.emit("navigationShow",this):this.emit("navigationHide",this),n&&n.toggleClass(this.params.navigation.hiddenClass),s&&s.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){ae.extend(this,{pagination:{init:ee.init.bind(this),render:ee.render.bind(this),update:ee.update.bind(this),destroy:ee.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&0<this.pagination.$el.length&&!z(e.target).hasClass(this.params.pagination.bulletClass)&&(!0===this.pagination.$el.hasClass(this.params.pagination.hiddenClass)?this.emit("paginationShow",this):this.emit("paginationHide",this),this.pagination.$el.toggleClass(this.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){ae.extend(this,{scrollbar:{init:te.init.bind(this),destroy:te.destroy.bind(this),updateSize:te.updateSize.bind(this),setTranslate:te.setTranslate.bind(this),setTransition:te.setTransition.bind(this),enableDraggable:te.enableDraggable.bind(this),disableDraggable:te.disableDraggable.bind(this),setDragPosition:te.setDragPosition.bind(this),getPointerPosition:te.getPointerPosition.bind(this),onDragStart:te.onDragStart.bind(this),onDragMove:te.onDragMove.bind(this),onDragEnd:te.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){ae.extend(this,{parallax:{setTransform:ie.setTransform.bind(this),setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var n=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=ne[e].bind(n)}),ae.extend(n,{zoom:t});var s=1;Object.defineProperty(n.zoom,"scale",{get:function(){return s},set:function(e){var t,i;s!==e&&(t=n.zoom.gesture.$imageEl?n.zoom.gesture.$imageEl[0]:void 0,i=n.zoom.gesture.$slideEl?n.zoom.gesture.$slideEl[0]:void 0,n.emit("zoomChange",e,t,i)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()},slideChange:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.params.cssMode&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){ae.extend(this,{lazy:{initialImageLoaded:!1,load:re.load.bind(this),loadInSlide:re.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()},slideChange:function(){this.params.lazy.enabled&&this.params.cssMode&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){ae.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:oe.getInterpolateFunction.bind(this),setTranslate:oe.setTranslate.bind(this),setTransition:oe.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;ae.extend(t,{a11y:{liveRegion:z('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(le).forEach(function(e){t.a11y[e]=le[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){ae.extend(this,{history:{init:de.init.bind(this),setHistory:de.setHistory.bind(this),setHistoryPopState:de.setHistoryPopState.bind(this),scrollToSlide:de.scrollToSlide.bind(this),destroy:de.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)},slideChange:function(){this.history.initialized&&this.params.cssMode&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){ae.extend(this,{hashNavigation:{initialized:!1,init:ue.init.bind(this),destroy:ue.destroy.bind(this),setHash:ue.setHash.bind(this),onHashCange:ue.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()},slideChange:function(){this.hashNavigation.initialized&&this.params.cssMode&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;ae.extend(t,{autoplay:{running:!1,paused:!1,run:ce.run.bind(t),start:ce.start.bind(t),stop:ce.stop.bind(t),pause:ce.pause.bind(t),onVisibilityChange:function(){"hidden"===document.visibilityState&&t.autoplay.running&&t.autoplay.pause(),"visible"===document.visibilityState&&t.autoplay.paused&&(t.autoplay.run(),t.autoplay.paused=!1)},onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&(this.autoplay.start(),document.addEventListener("visibilitychange",this.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},touchEnd:function(){this.params.cssMode&&this.autoplay.paused&&!this.params.autoplay.disableOnInteraction&&this.autoplay.run()},destroy:function(){this.autoplay.running&&this.autoplay.stop(),document.removeEventListener("visibilitychange",this.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){ae.extend(this,{fadeEffect:{setTranslate:he.setTranslate.bind(this),setTransition:he.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"fade"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"fade"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){ae.extend(this,{cubeEffect:{setTranslate:pe.setTranslate.bind(this),setTransition:pe.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"cube"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){ae.extend(this,{flipEffect:{setTranslate:fe.setTranslate.bind(this),setTransition:fe.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"flip"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){ae.extend(this,{coverflowEffect:{setTranslate:me.setTranslate.bind(this),setTransition:me.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){ae.extend(this,{thumbs:{swiper:null,init:ve.init.bind(this),update:ve.update.bind(this),onThumbClick:ve.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===B.use&&(B.use=B.Class.use,B.installModule=B.Class.installModule),B.use(ge),B}),function(u){u.extend(u.easing,{spincrementEasing:function(e,t,i,n,s){return t===s?i+n:n*(1-Math.pow(2,-10*t/s))+i}}),u.fn.spincrement=function(e){var l=u.extend({from:0,to:null,decimalPlaces:null,decimalPoint:".",thousandSeparator:",",duration:1e3,leeway:50,easing:"spincrementEasing",fade:!0,complete:null},e),i=new RegExp(/^(-?[0-9]+)([0-9]{3})/);function d(e,t){if(e=e.toFixed(t),0<t&&"."!==l.decimalPoint&&(e=e.replace(".",l.decimalPoint)),l.thousandSeparator)for(;i.test(e);)e=e.replace(i,"$1"+l.thousandSeparator+"$2");return e}return this.each(function(){var e,t,i,n=u(this),s=l.from;n.attr("data-from")&&(s=parseFloat(n.attr("data-from"))),i=n.attr("data-to")?parseFloat(n.attr("data-to")):null!==l.to?l.to:(e=-1<u.inArray(l.thousandSeparator,["\\","^","$","*","+","?","."])?"\\"+l.thousandSeparator:l.thousandSeparator,t=new RegExp(e,"g"),parseFloat(n.text().replace(t,"")));var a,r,o=l.duration;l.leeway&&(o+=Math.round(l.duration*(2*Math.random()-1)*l.leeway/100)),r=n.attr("data-dp")?parseInt(n.attr("data-dp"),10):null!==l.decimalPlaces?l.decimalPlaces:-1<(a=n.text().indexOf(l.decimalPoint))?n.text().length-(a+1):0,n.css("counter",s),l.fade&&n.css("opacity",0),n.animate({counter:i,opacity:1},{easing:l.easing,duration:o,step:function(e){n.html(d(e*i,r))},complete:function(){n.css("counter",null),n.html(d(i,r)),l.complete&&l.complete(n)}})})}}(jQuery),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return s={},i.m=n=[function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function s(){if(0<arguments.length&&void 0!==arguments[0]&&arguments[0]&&(v=!0),v)return m=(0,p.default)(m,g),(0,h.default)(m,g.once),m}function a(){m=(0,f.default)(),s()}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},o=(n(i(1)),i(6)),l=n(o),d=n(i(7)),u=n(i(8)),c=n(i(9)),h=n(i(10)),p=n(i(11)),f=n(i(14)),m=[],v=!1,g={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1};e.exports={init:function(e){g=r(g,e),m=(0,f.default)();var t,i=document.all&&!window.atob;return!0===(t=g.disable)||"mobile"===t&&c.default.mobile()||"phone"===t&&c.default.phone()||"tablet"===t&&c.default.tablet()||"function"==typeof t&&!0===t()||i?void m.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")}):(g.disableMutationObserver||u.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),g.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",g.easing),document.querySelector("body").setAttribute("data-aos-duration",g.duration),document.querySelector("body").setAttribute("data-aos-delay",g.delay),"DOMContentLoaded"===g.startEvent&&-1<["complete","interactive"].indexOf(document.readyState)?s(!0):"load"===g.startEvent?window.addEventListener(g.startEvent,function(){s(!0)}):document.addEventListener(g.startEvent,function(){s(!0)}),window.addEventListener("resize",(0,d.default)(s,g.debounceDelay,!0)),window.addEventListener("orientationchange",(0,d.default)(s,g.debounceDelay,!0)),window.addEventListener("scroll",(0,l.default)(function(){(0,h.default)(m,g.once)},g.throttleDelay)),g.disableMutationObserver||u.default.ready("[data-aos]",a),m)},refresh:s,refreshHard:a}},function(e,t){},,,,,function(m,e){(function(e){"use strict";function a(n,s,e){function a(e){var t=d,i=u;return d=u=void 0,m=e,h=n.apply(i,t)}function r(e){var t=e-f;return void 0===f||s<=t||t<0||g&&c<=e-m}function o(){var e,t,i=E();return r(i)?l(i):void(p=setTimeout(o,(t=s-((e=i)-f),g?T(t,c-(e-m)):t)))}function l(e){return p=void 0,i&&d?a(e):(d=u=void 0,h)}function t(){var e,t=E(),i=r(t);if(d=arguments,u=this,f=t,i){if(void 0===p)return m=e=f,p=setTimeout(o,s),v?a(e):h;if(g)return p=setTimeout(o,s),a(f)}return void 0===p&&(p=setTimeout(o,s)),h}var d,u,c,h,p,f,m=0,v=!1,g=!1,i=!0;if("function"!=typeof n)throw new TypeError(w);return s=b(s)||0,y(e)&&(v=!!e.leading,c=(g="maxWait"in e)?x(b(e.maxWait)||0,s):c,i="trailing"in e?!!e.trailing:i),t.cancel=function(){void 0!==p&&clearTimeout(p),d=f=u=p=void(m=0)},t.flush=function(){return void 0===p?h:l(E())},t}function y(e){var t=void 0===e?"undefined":i(e);return e&&("object"==t||"function"==t)}function n(e){return"symbol"==(void 0===e?"undefined":i(e))||(t=e)&&"object"==(void 0===t?"undefined":i(t))&&f.call(e)==r;var t}function b(e){if("number"==typeof e)return e;if(n(e))return s;var t;if(y(e)&&(e=y(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t),"string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var i=d.test(e);return i||u.test(e)?c(e.slice(2),i?2:8):l.test(e)?s:+e}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w="Expected a function",s=NaN,r="[object Symbol]",o=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,u=/^0o[0-7]+$/i,c=parseInt,t="object"==(void 0===e?"undefined":i(e))&&e&&e.Object===Object&&e,h="object"==("undefined"==typeof self?"undefined":i(self))&&self&&self.Object===Object&&self,p=t||h||Function("return this")(),f=Object.prototype.toString,x=Math.max,T=Math.min,E=function(){return p.Date.now()};m.exports=function(e,t,i){var n=!0,s=!0;if("function"!=typeof e)throw new TypeError(w);return y(i)&&(n="leading"in i?!!i.leading:n,s="trailing"in i?!!i.trailing:s),a(e,t,{leading:n,maxWait:t,trailing:s})}}).call(e,function(){return this}())},function(f,e){(function(e){"use strict";function y(e){var t=void 0===e?"undefined":i(e);return e&&("object"==t||"function"==t)}function n(e){return"symbol"==(void 0===e?"undefined":i(e))||(t=e)&&"object"==(void 0===t?"undefined":i(t))&&p.call(e)==a;var t}function b(e){if("number"==typeof e)return e;if(n(e))return s;var t;if(y(e)&&(e=y(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t),"string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var i=l.test(e);return i||d.test(e)?u(e.slice(2),i?2:8):o.test(e)?s:+e}function w(){return h.Date.now()}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=NaN,a="[object Symbol]",r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,d=/^0o[0-7]+$/i,u=parseInt,t="object"==(void 0===e?"undefined":i(e))&&e&&e.Object===Object&&e,c="object"==("undefined"==typeof self?"undefined":i(self))&&self&&self.Object===Object&&self,h=t||c||Function("return this")(),p=Object.prototype.toString,x=Math.max,T=Math.min;f.exports=function(n,s,e){function a(e){var t=d,i=u;return d=u=void 0,m=e,h=n.apply(i,t)}function r(e){var t=e-f;return void 0===f||s<=t||t<0||g&&c<=e-m}function o(){var e,t,i=w();return r(i)?l(i):void(p=setTimeout(o,(t=s-((e=i)-f),g?T(t,c-(e-m)):t)))}function l(e){return p=void 0,i&&d?a(e):(d=u=void 0,h)}function t(){var e,t=w(),i=r(t);if(d=arguments,u=this,f=t,i){if(void 0===p)return m=e=f,p=setTimeout(o,s),v?a(e):h;if(g)return p=setTimeout(o,s),a(f)}return void 0===p&&(p=setTimeout(o,s)),h}var d,u,c,h,p,f,m=0,v=!1,g=!1,i=!0;if("function"!=typeof n)throw new TypeError("Expected a function");return s=b(s)||0,y(e)&&(v=!!e.leading,c=(g="maxWait"in e)?x(b(e.maxWait)||0,s):c,i="trailing"in e?!!e.trailing:i),t.cancel=function(){void 0!==p&&clearTimeout(p),d=f=u=p=void(m=0)},t.flush=function(){return void 0===p?h:l(w())},t}}).call(e,function(){return this}())},function(e,t){"use strict";function s(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function a(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),i=Array.prototype.slice.call(e.removedNodes);if(function e(t){for(var i=void 0,n=void 0,i=0;i<t.length;i+=1){if((n=t[i]).dataset&&n.dataset.aos)return!0;if(n.children&&e(n.children))return!0}return!1}(t.concat(i)))return r()})}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){};t.default={isSupported:function(){return!!s()},ready:function(e,t){var i=window.document,n=new(s())(a);r=t,n.observe(i.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(e,t){"use strict";function i(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var n=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,s=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,a=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,r=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,o=(function(e,t,i){return t&&d(e.prototype,t),i&&d(e,i),e}(l,[{key:"phone",value:function(){var e=i();return!(!n.test(e)&&!s.test(e.substr(0,4)))}},{key:"mobile",value:function(){var e=i();return!(!a.test(e)&&!r.test(e.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),l);function l(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l)}function d(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t.default=new o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,r){var o=window.pageYOffset,l=window.innerHeight;e.forEach(function(e,t){var i,n,s,a;n=l+o,s=r,a=(i=e).node.getAttribute("data-aos-once"),n>i.position?i.node.classList.add("aos-animate"):void 0===a||"false"!==a&&(s||"true"===a)||i.node.classList.remove("aos-animate")})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,s=i(12),a=(n=s)&&n.__esModule?n:{default:n};t.default=function(e,i){return e.forEach(function(e,t){e.node.classList.add("aos-init"),e.position=(0,a.default)(e.node,i.offset)}),e}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,s=i(13),r=(n=s)&&n.__esModule?n:{default:n};t.default=function(e,t){var i=0,n=0,s=window.innerHeight,a={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(a.offset&&!isNaN(a.offset)&&(n=parseInt(a.offset)),a.anchor&&document.querySelectorAll(a.anchor)&&(e=document.querySelectorAll(a.anchor)[0]),i=(0,r.default)(e).top,a.anchorPlacement){case"top-bottom":break;case"center-bottom":i+=e.offsetHeight/2;break;case"bottom-bottom":i+=e.offsetHeight;break;case"top-center":i+=s/2;break;case"bottom-center":i+=s/2+e.offsetHeight;break;case"center-center":i+=s/2+e.offsetHeight/2;break;case"top-top":i+=s;break;case"bottom-top":i+=e.offsetHeight+s;break;case"center-top":i+=e.offsetHeight/2+s}return a.anchorPlacement||a.offset||isNaN(t)||(n=t),i+n}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){for(var t=0,i=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),i+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:i,left:t}}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){return e=e||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(e,function(e){return{node:e}})}}],i.c=s,i.p="dist/",i(0);function i(e){if(s[e])return s[e].exports;var t=s[e]={exports:{},id:e,loaded:!1};return n[e].call(t.exports,t,t.exports,i),t.loaded=!0,t.exports}var n,s});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
